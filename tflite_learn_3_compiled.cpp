/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.11.2024 12:45:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 17093, -28877, -30828, -23651, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00029063070542179048, 0.00020543434948194772, 0.00018884248856920749, 0.00025592689053155482, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ -26,-43,-65,-35,127,-39,17,-17,89,-5,35,73,-91,-45,-38,-54,15,-66,-83,11,-10,22,-49,122,-19,-44,-15,26,100,-39,45,-26, 
  /* [1][0][][] */ 61,82,-79,-9,-54,49,127,44,-63,-84,-95,32,85,-47,88,-119,119,-82,11,-51,14,-97,-71,-45,-4,-86,67,-56,-66,-107,-33,-36, 
  /* [2][0][][] */ -52,127,32,83,-67,-5,103,48,-92,-124,89,-57,-103,96,-126,65,62,91,97,-71,-15,-10,-28,-73,22,-90,96,-101,-39,13,-20,96, 
  /* [3][0][][] */ 73,-55,63,4,-23,97,37,-5,-4,-127,31,83,70,-5,-117,-19,93,-90,90,2,-96,-2,-19,-54,97,-5,-79,74,-84,93,-19,23, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0044659231789410114, 0.0031567690894007683, 0.0029018132481724024, 0.0039326534606516361, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -5, -50, -426, -491, 939, -116, -48, -159, 431, 1021, -42, -622, 89, -423, 85, -98, -80, 59, -238, -425, -34, 527, 21, 1310, 203, -229, 42, -533, 1363, -253, -49, -132, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 7.090350118232891e-05, 5.447709554573521e-05, 4.2731062421808019e-05, 4.4927579438081011e-05, 5.2547340601449832e-05, 5.2699288062285632e-05, 4.4805881771026179e-05, 5.2040355512872338e-05, 5.2966785005992278e-05, 5.8903478930005804e-05, 4.6997502067824826e-05, 4.3210788135183975e-05, 4.5916774979559705e-05, 5.1727849495364353e-05, 5.2990533731644973e-05, 4.1677059925859794e-05, 4.8738402256276459e-05, 5.1836603233823553e-05, 4.9408881750423461e-05, 4.282869485905394e-05, 4.2091156501555815e-05, 4.8415007768198848e-05, 8.9645902335178107e-05, 5.8987727243220434e-05, 5.1573708333307877e-05, 0.00010072719305753708, 4.7170124162221327e-05, 4.0760703996056691e-05, 5.3994044719729573e-05, 4.5243497879710048e-05, 4.9716683861333877e-05, 4.4482945668278262e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-9,60,-3,127,-18,-62,-74,32,-37,-69,-6,55,12,-30,31,-33,-11,-34,-41,-36,-68,6,59,-44,-2,50,-30,62,13,-5,-30,55,-41,-77,53,-65,-51,-58,10,47,-41,-60,66,28,-62,68,-16,24,-29,-35,59,-37,-45,-59,64,11,48,85,-72,-41,46,-40,55,9,12,38,40,25,57,64,-46,75,-61,26,52,-58,10,-43,28,31,10,62,5,-36,-30,-44,71,22,65,-17,-33,1,46,-6,15, 
  /* [1][0][][] */ -57,20,-59,8,-83,65,29,13,83,-96,-85,117,-7,-11,26,55,78,-22,41,127,-34,-7,20,22,1,7,-29,84,13,-2,83,-40,29,94,-30,18,33,57,-9,-58,-41,4,-8,-79,-9,37,-15,-36,-32,-29,67,51,10,86,-44,-28,26,67,19,53,-35,115,-89,-61,-27,37,56,19,75,34,-6,-10,-99,88,-28,34,56,-50,-34,40,-54,61,-66,-86,29,87,-68,-43,65,80,82,22,50,17,47,-5, 
  /* [2][0][][] */ 45,50,-74,71,-24,-52,79,75,-113,101,-46,123,118,-12,65,-127,-58,-31,47,50,-84,-26,104,14,-50,99,105,11,-61,94,74,93,-89,-30,-104,-112,-92,81,92,-29,-125,-68,4,-5,-102,120,-40,-91,90,40,102,-90,-29,56,5,37,-67,115,-79,6,12,64,-3,94,99,44,38,93,-102,56,36,-52,34,-79,13,24,-34,-33,0,10,37,-88,8,-29,-7,-98,-8,-22,102,106,-34,16,-12,-87,-64,-93, 
  /* [3][0][][] */ 67,-5,28,-32,-80,37,-117,23,44,17,58,1,84,84,63,-4,88,93,-56,4,108,-95,-75,-119,-38,-119,-82,95,38,-95,67,10,-72,-36,-19,-16,-100,-25,22,35,-26,-96,-93,-6,68,26,-46,-93,49,-82,38,-5,87,28,84,-103,-117,-121,-120,-71,-93,26,-39,57,56,-31,-68,-42,-45,-67,-7,88,7,-110,41,-58,27,81,82,-60,-90,-127,24,87,20,37,-53,-109,-88,41,-9,-101,78,-96,-85,26, 
  /* [4][0][][] */ 30,89,38,48,-21,-26,47,16,43,103,8,25,-60,-31,12,-48,28,-3,-62,-16,81,-46,102,37,-5,20,65,-12,-14,-19,-55,-67,85,79,70,-62,15,-7,-74,50,-42,-42,-60,-63,38,76,19,70,48,-68,-66,-86,-41,1,-59,15,3,-113,45,38,-14,-25,-21,-82,-67,40,31,-13,13,-87,-61,-65,-27,5,127,70,25,25,16,-31,0,-24,-84,-49,12,66,88,-24,-105,-62,63,-4,21,127,-111,12, 
  /* [5][0][][] */ 95,-81,47,70,35,-79,23,50,89,-127,-2,-67,29,84,26,31,47,49,-28,74,29,40,7,-18,-75,-67,-11,-75,43,28,14,-70,-42,7,-75,-6,-108,-26,22,28,-66,-42,31,76,-29,19,33,-46,-98,104,-3,39,33,23,19,-15,99,41,-46,-30,29,-71,37,-46,-37,88,-24,29,98,-6,83,-51,-53,71,-61,-67,14,-47,10,68,97,9,29,101,-63,74,-9,42,63,-80,79,73,-9,20,37,-84, 
  /* [6][0][][] */ 32,-53,103,91,-81,-54,3,72,2,-109,15,-58,83,72,114,-100,33,10,41,127,-69,-112,102,61,-59,-82,-2,-50,-15,-106,53,-56,-114,-95,-69,-113,-16,51,-104,86,95,59,34,-9,-93,114,-66,-38,-92,73,-41,-44,61,-19,102,-24,12,-1,-47,109,-76,18,49,-65,-31,78,97,-50,94,4,-105,-3,45,-49,-95,-40,-65,-105,-50,-38,44,-23,29,-4,-60,-77,-45,-71,87,106,93,26,-52,-113,82,-32, 
  /* [7][0][][] */ 100,43,-39,-22,-53,98,-17,2,107,-23,-76,39,45,-60,36,70,30,16,23,127,45,25,-13,69,-62,76,33,44,-59,88,-17,40,-6,31,30,72,-99,79,-6,-22,84,-64,78,57,51,7,98,-90,29,3,-99,-46,-23,93,25,18,98,-69,34,-55,18,12,47,-104,-40,-37,51,10,-85,24,49,65,64,27,46,43,-47,31,-84,22,79,-20,-35,-49,73,24,-101,90,66,16,75,67,-57,-92,14,-58, 
  /* [8][0][][] */ 17,38,-11,-70,43,19,-53,-9,7,60,36,54,-28,-38,-54,-64,-39,75,-69,-38,23,-8,79,100,-90,76,41,75,-61,4,-70,86,105,-35,71,7,112,0,-8,58,62,86,-92,-95,-8,-31,-29,93,34,-127,-67,-15,-44,-28,-34,-77,38,68,-124,94,83,24,36,89,-60,-43,-4,90,-87,40,23,3,65,60,25,31,-58,105,74,83,28,57,-82,-84,26,39,66,-49,30,-40,-61,64,-60,-18,-59,58, 
  /* [9][0][][] */ 7,33,104,41,105,-70,-18,-75,33,85,11,30,-74,-55,-57,15,43,9,-74,-74,-2,97,-43,-59,127,-19,-1,35,5,-76,-58,70,73,5,58,26,-12,17,-8,-22,44,-33,49,-51,69,15,-69,65,71,-23,-89,-49,78,-65,-57,54,108,-26,39,47,-78,91,79,-70,-65,11,103,46,-45,82,113,-50,21,62,-53,-45,-80,-42,-10,96,30,43,55,4,-15,-51,64,-23,66,26,-2,72,96,49,13,-17, 
  /* [10][0][][] */ -59,69,75,-71,-35,89,98,24,33,56,21,-69,82,81,-31,-1,-28,75,-118,-49,-10,23,47,-59,0,70,-106,-113,-43,74,-82,-63,53,100,101,53,-43,11,-26,24,-28,107,-102,-29,-89,-47,-4,-57,-17,-16,41,31,65,34,-47,-3,-79,-14,3,-47,22,84,117,45,127,-66,-95,-31,20,-21,-87,-69,70,75,-78,93,7,53,60,-8,75,11,52,102,-91,64,83,-17,40,20,-29,-49,-31,-44,-35,-71, 
  /* [11][0][][] */ 111,0,-32,95,108,34,39,18,99,75,-88,86,-5,-84,11,-74,-73,-110,54,23,16,61,11,-127,-115,-110,-32,55,65,-13,20,-28,-83,-68,52,35,-80,61,-40,-63,-40,86,-90,-14,-57,-73,-102,-105,78,92,112,38,-100,-88,-1,12,-67,-47,-41,-91,-83,67,69,8,21,69,-71,30,79,41,-79,-88,52,94,-104,35,-76,23,-57,80,-123,-27,-72,-47,28,-94,18,-38,-110,-17,-1,-97,-93,-38,-72,-45, 
  /* [12][0][][] */ 24,64,-56,7,120,33,-24,35,-64,19,-12,-6,-3,17,46,-66,-90,-22,-14,-72,36,-5,16,100,-30,-68,101,-92,91,35,-33,115,-68,-65,-36,1,-12,-66,-39,57,115,40,-107,-42,-21,-80,-33,112,-34,-95,-125,108,37,-2,-83,84,0,-48,75,70,41,81,7,68,79,39,-36,127,93,88,54,89,78,107,-36,-7,-26,34,-101,-66,-41,67,79,25,-29,41,55,121,-69,-103,88,45,94,14,-1,69, 
  /* [13][0][][] */ 80,-53,76,76,32,93,58,41,67,-76,3,18,78,62,45,-43,-111,-59,-61,42,61,-34,85,-48,-94,49,2,14,-66,-80,65,29,7,84,-38,24,-78,-30,19,47,-57,66,-38,8,-35,31,-3,-32,4,107,-9,-92,-84,30,86,-59,-52,32,-35,-81,5,127,-82,9,-36,-50,-89,59,-58,0,82,-15,-84,28,-73,-39,-82,38,60,-67,39,-59,62,22,-73,-96,72,104,-13,-36,-60,52,102,-92,68,-11, 
  /* [14][0][][] */ -10,-64,72,53,127,-32,-10,-105,-85,-74,70,34,-46,-32,-70,-53,-42,-36,-13,35,-45,28,3,44,-34,-73,-28,22,-83,-97,-81,44,103,-10,-33,25,75,113,17,-77,7,-91,41,77,67,-84,74,-53,113,60,44,52,77,-7,-3,-8,1,21,98,80,-8,-68,16,79,-77,-12,62,-86,-67,-63,-54,105,67,78,54,-71,32,-91,46,33,21,22,-90,-47,-103,-52,-79,84,77,14,90,-13,66,66,11,89, 
  /* [15][0][][] */ 6,-36,-25,67,76,-95,63,-109,55,-2,-72,14,118,6,-95,-119,96,5,-116,13,44,20,78,110,70,88,42,97,34,53,65,-126,-2,4,-58,-14,-65,105,107,-70,7,113,-59,-24,25,-83,-59,-84,-2,-97,12,26,-109,-109,-55,-7,64,52,-57,117,-26,-46,27,113,-27,94,-73,6,-49,-8,64,-90,14,-17,91,-106,16,63,111,74,-90,78,-104,-72,-127,-38,-94,27,80,72,-127,-40,80,119,-93,102, 
  /* [16][0][][] */ -42,-11,82,-40,42,104,-45,44,53,17,-90,74,-9,-29,-44,-45,88,74,102,71,102,70,-39,51,-26,38,-54,59,-80,17,40,28,-108,82,26,37,-41,56,-48,-51,29,-37,70,80,64,98,103,-10,-60,-55,-17,115,-32,127,63,43,31,80,66,13,110,99,25,63,56,24,-33,82,68,89,-31,-4,16,98,28,72,0,78,-94,-18,23,-80,48,28,16,94,84,24,75,21,-19,105,63,-51,-78,11, 
  /* [17][0][][] */ 19,-104,38,63,-83,-87,-51,-58,39,-79,77,69,91,51,-88,27,26,42,49,127,-76,-11,8,-39,-24,95,-64,14,84,-44,-25,65,-49,-11,24,0,-50,91,-35,-23,-78,-31,-9,3,25,22,72,-88,52,92,35,40,-53,72,116,-45,-119,68,-67,-109,45,-71,90,63,-62,-60,33,-81,-74,1,79,6,5,-79,-38,60,114,-46,40,-67,8,14,-69,-71,-94,64,54,-26,16,77,-71,-86,-2,74,63,2, 
  /* [18][0][][] */ -96,81,88,-58,0,-121,-91,-6,-1,63,-96,-38,-45,25,51,-45,15,-24,29,-24,83,-44,12,-69,26,-86,-18,90,22,28,-5,39,39,-26,-127,-96,-30,29,-39,47,-36,-5,-51,-13,-99,12,20,-7,14,-24,59,26,-97,-7,-2,70,-43,23,-38,-103,70,87,-5,3,-77,-98,-32,64,46,-77,-82,88,-101,-32,-96,-95,49,40,-6,-71,-46,-19,-30,-58,89,-37,57,63,-96,-66,-66,92,74,-44,42,-44, 
  /* [19][0][][] */ 8,22,70,30,59,-62,90,80,86,-63,22,-11,-97,26,-63,56,72,-109,110,49,-28,74,-60,6,74,-83,25,-66,-91,-121,-71,38,79,-92,32,-8,8,-77,-62,-108,37,-121,-90,3,-93,23,68,-97,-29,38,-45,38,-36,2,-1,-16,14,94,-2,-31,48,-36,92,59,-73,-9,-31,-10,-5,44,72,-53,-66,-127,-51,-85,-28,-115,9,98,51,-117,-33,70,-92,-15,5,-11,83,23,-3,56,-37,116,63,-53, 
  /* [20][0][][] */ -20,79,75,80,-86,115,15,62,-3,19,-89,-4,-23,83,48,-84,-42,-45,-99,-25,17,-45,-73,-74,105,-84,-112,37,21,-5,-50,105,110,36,11,79,58,-32,10,-121,-87,-44,-96,-104,-15,-77,-71,120,70,-127,-114,27,36,98,60,-4,100,59,114,87,99,-37,-64,-25,-22,-79,-54,7,-73,-86,-71,73,-59,-76,97,12,94,89,109,99,76,1,83,-47,54,118,-22,57,13,90,44,60,8,20,-3,28, 
  /* [21][0][][] */ 61,86,76,-86,73,-64,72,8,2,-17,-63,28,-9,37,-40,-70,-69,-21,5,-83,98,-31,81,-68,46,-75,-20,81,22,-15,2,-49,21,11,-59,-93,122,75,-108,-30,-13,8,26,-6,-96,-75,-90,90,9,-97,24,67,52,44,-106,12,-29,44,-55,127,51,-51,-1,27,64,26,-18,-61,-102,-1,64,70,40,-44,95,77,-103,-4,64,94,12,100,28,-70,31,-85,74,-82,-89,65,86,-102,-16,-36,54,-20, 
  /* [22][0][][] */ 16,-25,-30,-54,87,0,53,30,-47,41,-41,-39,127,-60,-54,-48,26,36,24,-26,44,-35,16,18,45,9,-43,74,-5,-12,-26,-54,75,20,24,6,10,-13,-26,-53,-1,-6,-6,44,25,-66,38,-12,-11,-10,15,-10,6,-54,-26,26,-11,-12,37,-11,51,-25,-34,-27,-43,4,-53,5,71,44,-1,11,-38,7,44,-41,30,-17,35,44,56,-57,-12,-46,39,44,50,-20,-20,7,-2,31,17,44,-28,48, 
  /* [23][0][][] */ 53,-44,34,68,65,-109,26,-53,49,-31,88,25,-104,-75,40,-9,95,-21,-112,11,56,-28,111,1,6,-15,64,27,47,-24,57,-56,9,48,59,51,111,2,-63,16,-70,8,7,-62,-48,-77,81,37,93,-123,-127,-53,64,-35,-61,39,-44,-36,51,76,-113,-66,-41,-45,9,28,-53,-63,6,-14,87,-60,7,-50,5,-42,0,28,91,125,-41,-36,-10,-104,85,23,104,-42,-78,28,71,-59,80,-3,-53,68, 
  /* [24][0][][] */ -127,-40,-76,-76,-95,-63,-59,-84,37,123,61,64,105,50,-45,-86,-46,45,61,-12,81,-63,-33,-41,14,-23,81,75,121,68,13,-85,19,-10,32,27,-12,-92,61,-32,-70,-67,64,11,18,-35,14,71,-36,4,-57,17,82,17,74,-73,-27,77,28,8,69,38,11,98,-67,80,-32,-105,-63,12,-24,-15,-12,16,93,95,63,-49,-85,-69,-67,-72,-59,-102,8,37,0,-94,22,-82,12,-91,-31,39,-102,5, 
  /* [25][0][][] */ -24,-18,-42,-15,36,-36,-49,16,17,-50,-24,3,45,-8,-59,-14,-34,24,18,-43,36,29,-10,-28,3,-27,-46,11,29,-34,14,44,44,-60,15,27,38,-38,-19,-11,-42,35,-50,-3,34,14,18,8,-47,31,-8,-5,20,-14,-36,45,-14,25,-51,28,47,14,15,127,3,30,-13,1,-12,-4,-7,-49,10,-56,61,7,30,27,3,11,20,16,0,35,-37,-25,-46,-38,-3,-21,41,6,-52,31,-14,-42, 
  /* [26][0][][] */ 48,-111,-14,10,-74,-4,-7,-2,-78,-123,109,122,-98,-25,17,2,91,34,-66,-19,9,68,90,14,45,60,12,43,18,-1,-79,11,-49,-41,-107,-87,-60,91,-28,100,-80,97,69,39,-45,85,-18,105,-28,73,5,99,8,-23,21,-102,86,59,96,16,17,-55,36,-42,127,-4,-50,41,-92,90,66,74,78,-77,-59,11,43,-106,-85,-4,-23,100,41,-56,78,-2,-48,26,-86,124,24,40,-69,55,87,88, 
  /* [27][0][][] */ 3,-4,-80,-114,-114,-76,-82,-27,37,103,30,-118,-25,49,75,-38,63,-23,68,-86,-102,2,-41,-33,-113,40,-117,-9,69,33,-41,-14,65,63,-100,-100,-98,-77,-124,85,-107,12,18,8,92,17,63,98,92,76,56,-80,-90,-96,-16,-45,102,-24,-127,-87,-70,-77,-42,49,42,-55,-127,103,46,-2,-120,10,56,-71,-16,-104,50,-80,83,98,84,-41,120,-64,-86,-96,-40,29,-54,-15,-43,-56,52,24,82,46, 
  /* [28][0][][] */ 62,26,127,43,-86,-25,-53,-49,-23,-24,66,62,-102,-62,35,91,116,102,-66,74,-20,49,-48,-38,-76,97,-44,2,-32,-59,18,-21,-28,16,107,99,80,-78,-7,31,88,48,-68,65,-66,-2,8,64,73,-65,-40,-39,-41,9,66,51,40,-17,52,71,-12,-3,-63,-1,48,61,14,77,-80,25,-75,-30,85,41,58,-36,-97,-7,-41,66,-54,-39,92,-35,70,-72,75,-84,-82,-46,10,-48,-19,91,-61,-38, 
  /* [29][0][][] */ 57,57,45,-70,-91,13,-113,-1,79,11,-90,-90,123,-97,-52,-55,-83,94,33,-73,-56,-35,50,7,-44,30,-37,-23,-90,4,99,-3,35,-2,-70,-58,-9,92,-12,91,46,111,-46,80,-10,99,-57,-28,5,-18,65,-77,86,-96,99,70,-85,69,-67,107,-84,93,-58,-19,-48,-60,47,93,96,-84,52,-44,103,74,35,19,127,-58,-29,24,1,-92,13,-61,60,113,51,82,-18,87,52,70,-62,37,-21,48, 
  /* [30][0][][] */ 37,-16,-55,24,-28,33,-67,-11,78,87,1,-41,-79,15,48,14,-4,31,84,-101,31,-92,-91,10,-59,6,-71,85,-11,-98,-85,31,-64,-66,-106,21,42,-13,38,10,83,-45,-10,106,89,-38,106,53,-2,53,-20,-59,93,-56,-5,93,-17,-12,-22,-38,-101,-8,-22,-32,-56,-76,-86,66,-30,96,72,7,-59,82,37,-86,-61,-53,-77,-47,16,42,-94,-37,-98,32,-70,90,-48,-127,47,63,-38,70,-54,-53, 
  /* [31][0][][] */ 69,-109,49,83,76,105,-50,-127,-41,-24,-78,-42,105,-117,-44,102,-47,-94,93,81,54,36,-35,105,33,-97,44,71,-29,-62,16,103,14,18,-78,-17,112,-47,-71,-116,39,-77,-41,24,3,-66,-50,31,62,84,99,-37,-93,-54,-56,21,-109,71,-6,105,-47,40,104,-39,54,104,-42,-94,84,-125,-104,5,-77,-34,12,14,-39,-50,59,79,-74,-23,60,50,51,98,-105,11,13,-42,-31,-50,20,83,-10,-17, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0030133987311273813, 0.0023152765352278948, 0.0018160701729357243, 0.0019094221061095595, 0.0022332619410008192, 0.0022397197317332029, 0.0019042500061914325, 0.0022117150947451591, 0.0022510883864015341, 0.0025033978745341301, 0.0019973937887698412, 0.0018364584539085627, 0.0019514629384502769, 0.0021984335035085678, 0.0022520977072417736, 0.0017712750704959035, 0.0020713820122182369, 0.0022030556574463844, 0.0020998774562031031, 0.0018202195642516017, 0.0017888740403577685, 0.0020576377864927053, 0.0038099507801234722, 0.0025069783441722393, 0.0021918825805187225, 0.0042809057049453259, 0.0020047302823513746, 0.001732329954393208, 0.0022947469260543585, 0.0019228486344218254, 0.0021129590459167957, 0.0018905251054093242, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2056, 2917, 7954, 2032, -3028, -2918, 16077, 1820, 2606, -1328, 12485, -261, -5929, 1742, 15468, 6811, 10520, 4183, -3090, -3529, 5218, 20436, 20127, 10791, 1302, 680, 3008, 2395, 1772, -4195, 4009, -2672, -16, 2979, 267, 557, 8472, 3698, -1491, 3717, 6737, 5171, 4992, 7552, 4038, 4281, 1387, 7624, 3386, -3690, -4754, 447, -201, -827, 1858, -86, 223, -801, -3952, 8799, -838, 1029, -957, -1546, -3001, 5964, 16162, 1396, -1974, 887, 1100, 1700, 1833, -1141, 573, 8349, -400, 15532, 13030, -487, 7013, 1690, -495, 930, 12303, 5849, 3835, 962, 4387, 2864, -299, -10506, 586, -1715, -1291, -1567, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00031439511803910136, 0.00053482491057366133, 0.00030312032322399318, 0.00042648112867027521, 0.00033367416472174227, 0.00053458829643204808, 0.00020416124607436359, 0.00037815672112628818, 0.00023420293291565031, 0.00047440471826121211, 0.00016100838547572494, 0.00038674581446684897, 0.00041531331953592598, 0.0015996103174984455, 0.00019871645781677216, 0.00016781245358288288, 0.0001778244914021343, 0.00035052845487371087, 0.00062545191030949354, 0.00047884680679999292, 0.00012108642113162205, 0.00013217213563621044, 0.00015206217358354479, 0.00015468800847884268, 0.00016988281277008355, 0.00070779060479253531, 0.0009855503449216485, 0.00045688913087360561, 0.00027476766263134778, 0.00047090745647437871, 0.00036186387296766043, 0.00030616519507020712, 0.00031092402059584856, 0.00038245166069827974, 0.00051877275109291077, 0.00036400844692252576, 0.00022737921972293407, 0.0002882903499994427, 0.00044854381121695042, 0.00047830084804445505, 0.00019238432287238538, 0.00050519779324531555, 0.00030370263266377151, 0.00030482001602649689, 0.00047089919098652899, 0.00023523189884144813, 0.00035432673757895827, 0.00029009144054725766, 0.00040712804184295237, 0.00037096801679581404, 0.00031243750709109008, 0.00025971754803322256, 0.00068455649306997657, 0.00035415723687037826, 0.00042837538057938218, 0.00032714995904825628, 0.00056901900097727776, 0.0003352784551680088, 0.00039094334351830184, 0.00021682858641725034, 0.00087358884047716856, 0.00060854846378788352, 0.00027709390269592404, 0.00049600726924836636, 0.0006213902379386127, 0.00032337862649001181, 0.00013464588846545666, 0.00029528693994507194, 0.000578753009904176, 0.00039839561213739216, 0.00034955429146066308, 0.00029111589537933469, 0.00072760606417432427, 0.00034113528090529144, 0.00033495691604912281, 0.00025749957421794534, 0.00036533508682623506, 0.00012002850417047739, 0.00013999329530633986, 0.00031715139630250633, 0.00020485732238739729, 0.00018675562751013786, 0.00018806578009389341, 0.00025290867779403925, 0.00015045676263980567, 0.00040621220250613987, 0.00062560348305851221, 0.00025612907484173775, 0.00015719563816674054, 0.00070129416417330503, 0.00035010318970307708, 0.00018534081755205989, 0.00036874020588584244, 0.00058146874653175473, 0.00045849301386624575, 0.00026207391056232154, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,118,-27,-127,-62,-50,-21,-46,-5,-12,-13,76,30,-57,-10,81, 
  /* [1][0][][] */ -10,2,-63,-1,-67,-51,66,-76,83,44,-88,46,-7,22,56,-127, 
  /* [2][0][][] */ -22,22,-44,39,76,23,-84,-67,127,-34,20,2,-38,96,-85,33, 
  /* [3][0][][] */ 34,-67,-51,-127,31,-4,-17,21,114,-10,110,34,-22,27,3,99, 
  /* [4][0][][] */ -85,55,34,26,16,-10,-66,36,-4,9,71,-20,-127,-23,-1,-9, 
  /* [5][0][][] */ -8,68,127,26,19,57,-93,42,-30,52,-35,-15,31,-7,-85,-32, 
  /* [6][0][][] */ 42,-56,121,-124,53,-17,-47,117,-76,-127,80,-47,41,90,-28,78, 
  /* [7][0][][] */ 50,103,3,-89,91,-3,16,-75,104,127,-32,-1,28,-15,66,71, 
  /* [8][0][][] */ 4,-97,29,-98,27,-72,16,-104,28,90,82,-16,26,127,84,66, 
  /* [9][0][][] */ -4,-29,-12,127,38,-1,40,-39,-46,106,29,-15,-17,-44,-19,-17, 
  /* [10][0][][] */ -27,51,-99,-127,46,18,-30,85,72,-100,60,2,-30,-83,-33,13, 
  /* [11][0][][] */ -2,-6,30,-10,79,-19,86,-62,-74,19,6,47,-2,127,-62,-46, 
  /* [12][0][][] */ 41,3,-127,-2,-31,-29,68,18,34,25,-89,-48,-30,81,-26,52, 
  /* [13][0][][] */ -16,13,-25,7,8,-127,-15,15,-15,-3,0,-15,6,-16,8,10, 
  /* [14][0][][] */ 11,-53,90,-64,66,0,-122,-127,-38,-4,68,4,-13,-67,-3,-26, 
  /* [15][0][][] */ -94,28,0,-62,8,35,106,7,-70,60,116,-5,2,102,127,-8, 
  /* [16][0][][] */ -8,51,127,83,24,30,78,48,-80,45,-15,-13,23,-3,7,-93, 
  /* [17][0][][] */ -44,-126,-2,33,-87,-26,-64,11,-127,-32,8,-63,7,41,60,-17, 
  /* [18][0][][] */ 24,73,-18,70,71,-25,4,-35,32,-7,-81,-46,4,127,52,34, 
  /* [19][0][][] */ 31,-55,47,50,127,-7,-57,-86,-95,-81,-25,-63,-3,14,32,-58, 
  /* [20][0][][] */ 127,-115,-19,-82,-4,-72,30,39,-50,90,-93,10,40,48,80,62, 
  /* [21][0][][] */ 17,-11,71,-41,15,-4,-60,98,-7,-45,127,34,-7,83,56,63, 
  /* [22][0][][] */ -28,27,-46,127,-48,-8,114,74,-4,44,-7,21,12,5,20,6, 
  /* [23][0][][] */ 34,-25,109,-127,37,-31,-2,38,0,70,3,-41,-40,-5,-88,60, 
  /* [24][0][][] */ -126,43,13,-13,4,127,10,-41,-4,21,103,-4,-79,32,93,-34, 
  /* [25][0][][] */ 23,22,3,32,26,5,56,-55,2,-127,-15,-20,-6,-35,1,1, 
  /* [26][0][][] */ -50,2,15,16,-39,2,-21,-11,-76,-26,-14,-18,-9,127,-21,39, 
  /* [27][0][][] */ -16,30,15,67,45,-20,-13,-39,58,5,-8,13,-1,127,-7,-4, 
  /* [28][0][][] */ 18,72,95,79,127,5,36,58,-88,-13,-65,-30,29,111,35,-39, 
  /* [29][0][][] */ -7,-30,8,36,2,4,36,58,-22,4,-46,-127,2,-7,-17,23, 
  /* [30][0][][] */ -16,67,-47,63,-39,-23,55,-127,-47,61,-23,-19,58,38,69,90, 
  /* [31][0][][] */ -65,15,4,-59,14,12,-83,-127,9,63,-32,-110,-73,-57,-4,-31, 
  /* [32][0][][] */ -127,-44,0,49,40,33,-14,14,-4,-40,-85,52,59,-2,52,64, 
  /* [33][0][][] */ -3,-38,-42,11,-72,-5,-100,-2,64,15,29,-57,51,-127,126,23, 
  /* [34][0][][] */ 38,-16,63,33,37,31,-36,87,-60,-28,68,23,25,-13,-28,127, 
  /* [35][0][][] */ -46,43,-83,13,-2,10,-6,-105,86,92,-56,27,7,-10,83,-127, 
  /* [36][0][][] */ -19,48,49,127,10,52,77,17,40,28,24,52,4,7,-116,-77, 
  /* [37][0][][] */ -14,-3,0,-82,29,-24,-39,-36,-87,15,32,-38,17,-127,62,-50, 
  /* [38][0][][] */ 41,116,-10,-38,127,-2,25,-30,117,56,-32,6,16,-32,17,11, 
  /* [39][0][][] */ -21,43,-11,-127,-27,1,-16,23,55,-58,-21,-27,3,63,40,55, 
  /* [40][0][][] */ -14,-28,50,-127,-26,-15,-10,-31,-120,27,-29,-28,-50,-108,89,-27, 
  /* [41][0][][] */ 7,-20,-61,-19,12,-51,17,-16,-40,9,-49,-23,-127,4,15,38, 
  /* [42][0][][] */ 121,96,-66,-51,-80,-81,-2,-63,-12,72,127,-87,-81,29,126,-121, 
  /* [43][0][][] */ -2,102,-96,-31,42,-41,127,-31,22,75,-58,-49,12,-93,-56,-9, 
  /* [44][0][][] */ -34,-20,11,-53,72,28,-102,-127,-7,-33,18,31,-26,-34,89,-80, 
  /* [45][0][][] */ -8,33,-127,-81,38,-94,46,-80,13,45,10,-122,38,-13,52,1, 
  /* [46][0][][] */ -5,-1,-22,-97,-10,20,17,-19,-124,-8,18,5,-15,-127,58,-28, 
  /* [47][0][][] */ 17,50,25,-13,127,-8,-30,24,-46,45,7,36,-5,2,121,-29, 
  /* [48][0][][] */ -127,-65,-17,31,50,16,6,7,12,-34,-80,74,60,0,69,41, 
  /* [49][0][][] */ -7,32,58,62,127,5,34,10,-107,-82,-12,-26,-40,122,15,-78, 
  /* [50][0][][] */ 20,-20,-75,-37,12,-127,-20,-24,15,-6,0,-78,58,-37,6,6, 
  /* [51][0][][] */ -4,28,40,-9,25,17,-13,16,-127,77,22,-118,3,-108,-9,84, 
  /* [52][0][][] */ 23,21,-9,54,44,-11,17,39,42,103,-50,-59,38,127,86,26, 
  /* [53][0][][] */ -8,-61,-3,-29,-80,-2,-90,-1,47,44,19,-70,51,-127,98,15, 
  /* [54][0][][] */ 48,16,-65,-8,127,56,-115,-40,-112,-12,-15,-108,18,-39,-4,-22, 
  /* [55][0][][] */ 66,-17,34,-20,8,-33,-93,-127,-18,-69,-103,24,-10,-33,35,30, 
  /* [56][0][][] */ -23,14,19,-21,2,-17,-91,51,-6,127,6,-14,12,3,2,-9, 
  /* [57][0][][] */ -11,29,-52,-20,-61,-48,127,91,-18,51,-30,-27,39,11,84,-18, 
  /* [58][0][][] */ 25,9,-127,5,66,55,-19,49,-94,-17,9,6,-55,-3,24,-20, 
  /* [59][0][][] */ -101,75,127,17,-62,-52,83,124,28,21,29,-4,4,15,63,-16, 
  /* [60][0][][] */ 12,-2,-62,-14,28,-127,-32,-16,-15,-12,-3,-49,29,-14,-9,20, 
  /* [61][0][][] */ 30,-22,3,127,80,16,28,1,-110,-18,2,29,-10,36,41,-31, 
  /* [62][0][][] */ -65,127,8,-69,-21,-13,-84,72,-26,-62,-53,-80,-7,-101,-47,-22, 
  /* [63][0][][] */ -12,9,-59,127,-105,-4,-61,-33,-70,-27,-52,-46,22,75,52,53, 
  /* [64][0][][] */ -3,-7,18,41,-20,7,-10,68,46,6,-24,-61,-7,-127,50,6, 
  /* [65][0][][] */ -37,-42,18,-127,27,-30,58,-11,-3,67,1,-107,-20,10,15,-28, 
  /* [66][0][][] */ 5,-26,48,-46,25,-3,-18,82,-20,-30,64,29,-41,127,59,56, 
  /* [67][0][][] */ 1,34,4,-127,-19,-10,-46,19,72,-53,-44,-11,13,80,68,46, 
  /* [68][0][][] */ -16,46,127,22,22,-3,-66,-20,-51,-33,-43,-48,-4,-14,69,-13, 
  /* [69][0][][] */ 126,65,-26,-43,-97,-57,-22,-61,1,93,127,-91,-93,44,93,-88, 
  /* [70][0][][] */ 38,1,-33,-7,-29,18,52,127,-16,79,-33,26,29,82,-30,4, 
  /* [71][0][][] */ -1,-4,-15,6,13,-63,6,23,-43,24,-66,7,-127,7,47,39, 
  /* [72][0][][] */ 8,23,-127,6,2,-1,20,98,-39,-35,-13,-11,2,16,-23,24, 
  /* [73][0][][] */ -70,73,86,-10,33,-57,-127,-115,25,-68,33,-39,22,-82,36,9, 
  /* [74][0][][] */ -11,33,30,127,17,7,-59,122,-71,31,-61,62,-11,-115,28,-65, 
  /* [75][0][][] */ -1,2,-69,8,33,-15,31,-46,107,44,-11,-39,32,127,-43,13, 
  /* [76][0][][] */ 6,-7,-7,17,-5,-4,-20,59,11,-39,-25,-127,2,-28,13,20, 
  /* [77][0][][] */ 29,4,27,127,-101,32,85,88,53,13,-60,67,-19,-18,-12,40, 
  /* [78][0][][] */ 20,22,35,-72,37,-26,-49,55,42,-90,-9,-6,46,127,-7,25, 
  /* [79][0][][] */ -6,-62,-69,-44,-77,8,6,-79,127,-10,11,87,11,46,85,-58, 
  /* [80][0][][] */ -47,3,127,-115,-12,-53,15,-82,-65,92,-63,-122,12,72,77,-23, 
  /* [81][0][][] */ -42,38,-127,25,69,-113,-30,57,-4,-31,67,8,25,-13,21,-16, 
  /* [82][0][][] */ 127,-20,-5,15,15,-119,-23,11,-29,-8,-107,-8,112,12,-16,29, 
  /* [83][0][][] */ -29,78,-68,-97,-81,-25,61,-96,62,73,-83,-127,19,52,45,119, 
  /* [84][0][][] */ -30,10,53,-27,14,-5,65,-127,-13,47,14,-23,22,54,70,-14, 
  /* [85][0][][] */ -65,105,47,-127,-60,-17,-41,-17,-60,19,-66,6,13,-16,-75,-15, 
  /* [86][0][][] */ -4,-1,12,15,-32,-47,127,37,35,-19,-10,23,18,39,73,-25, 
  /* [87][0][][] */ -29,-23,4,-127,-12,-44,62,13,-19,20,-33,-120,-41,12,7,-39, 
  /* [88][0][][] */ 79,-40,56,-40,32,-127,-9,-5,-81,101,-97,-95,62,12,80,10, 
  /* [89][0][][] */ 20,-17,-45,-13,37,-18,-10,-8,-48,7,26,-58,127,-5,16,-63, 
  /* [90][0][][] */ -1,-33,47,-39,77,-14,-86,89,42,-59,-60,-43,-2,127,27,-117, 
  /* [91][0][][] */ -116,-13,-42,-108,11,17,-11,-95,51,123,23,-127,-98,-19,34,42, 
  /* [92][0][][] */ -40,27,63,18,13,-127,9,11,-4,-17,1,-13,1,-24,27,-4, 
  /* [93][0][][] */ 46,-21,127,-11,-31,49,46,-32,-14,23,-54,-18,-14,1,21,-18, 
  /* [94][0][][] */ 42,-15,-22,-32,39,-12,-24,-22,-43,-5,37,-54,127,-25,24,-45, 
  /* [95][0][][] */ 119,123,-10,49,-88,-5,-71,29,-2,4,127,-33,-75,30,83,-99, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00071340176509693265, 0.0012135844444856048, 0.00068781786831095815, 0.0009677389170974493, 0.00075714837294071913, 0.0012130475370213389, 0.00046326735173352063, 0.00085808482253924012, 0.00053143571130931377, 0.0010764835169538856, 0.00036534812534227967, 0.00087757455185055733, 0.00094239774625748396, 0.0036297154147177935, 0.00045091245556250215, 0.00038078741636127234, 0.00040350598283112049, 0.00079539284342899919, 0.0014192285016179085, 0.0010865632211789489, 0.00027476021205075085, 0.00029991508927196264, 0.00034504805807955563, 0.00035100639797747135, 0.00038548532756976783, 0.0016060651978477836, 0.0022363367024809122, 0.0010367385111749172, 0.00062348210485652089, 0.0010685478337109089, 0.00082111434312537313, 0.00069472705945372581, 0.00070552545366808772, 0.00086783058941364288, 0.0011771601857617497, 0.00082598061999306083, 0.0005159518332220614, 0.00065416679717600346, 0.0010178019292652607, 0.0010853243293240666, 0.000436544039985165, 0.0011463569244369864, 0.00068913918221369386, 0.0006916747079230845, 0.0010685290908440948, 0.00053377053700387478, 0.00080401159357279539, 0.00065825373167172074, 0.00092382438015192747, 0.00084177276585251093, 0.0007089597056619823, 0.00058933155378326774, 0.0015533441910520196, 0.00080362701555714011, 0.00097203720360994339, 0.00074234412750229239, 0.001291175140067935, 0.00076078868005424738, 0.00088709924602881074, 0.00049201113870367408, 0.0019822821486741304, 0.0013808724470436573, 0.00062876066658645868, 0.0011255024001002312, 0.0014100120170041919, 0.00073378649540245533, 0.00030552834505215287, 0.00067004293669015169, 0.001313262851908803, 0.00090400938643142581, 0.00079318234929814935, 0.00066057831281796098, 0.0016510289860889316, 0.00077407853677868843, 0.00076005904702469707, 0.00058429868659004569, 0.00082899094559252262, 0.00027235966990701854, 0.00031766225583851337, 0.00071965612005442381, 0.00046484684571623802, 0.00042377185309305787, 0.00042674472206272185, 0.00057388137793168426, 0.00034140518982894719, 0.00092174619203433394, 0.0014195723924785852, 0.00058118888409808278, 0.00035669651697389781, 0.0015913239913061261, 0.00079442781861871481, 0.00042056146776303649, 0.00083671754691749811, 0.00131942518055439, 0.0010403778869658709, 0.00059467839309945703, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -5855, 25398, -17814, -5422, -8366, 7709, 24273, -50574, -3776, 24255, 14653, 11522, 604, 24025, -2966, 23589, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00074213428888469934, 0.00040268569136969745, 0.00018613976135384291, 0.00025244909920729697, 0.00054623768664896488, 0.00034116636379621923, 0.00038728158688172698, 0.00032974465284496546, 0.00031783251324668527, 0.00024956860579550266, 0.00058999663451686502, 0.00042446856969036162, 0.00029883321258239448, 0.00022863662161398679, 0.00055447121849283576, 0.00041759881423786283, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -10,-23,15,-31,24,-7,-50,4,24,-11,-3,-12,-9,-21,-22,25,-2,0,10,4,-2,-50,8,4,-1,20,-1,127,23,-30,47,-15,6,9,8,11,-13,14,-55,3,0,12,-4,17,-3,-4,5,14,18,-2,-11,-3,6,-15,10,75,9,13,-9,-19,-11,19,2,-22,-31,-60,-16,38,9,20,15,-12,-6,-21,-6,-22,-25,15,-3,5,1,-25,24,15,-9,-31,-14,-91,-7,-21,8,0,31,-35,-25,-25, 
  /* [1][0][][] */ 33,-94,-99,-74,115,10,98,58,-6,-97,-56,-15,-23,-4,-75,34,-53,28,10,71,8,-16,-14,-92,10,-8,-1,-39,4,-15,-77,11,-15,-7,-11,7,15,-16,6,70,-43,32,-45,17,-66,73,-3,40,20,-107,1,-76,-34,25,94,43,-52,-23,-34,-32,24,-35,19,-48,-81,116,-51,-46,-18,-91,-20,5,80,-127,-53,10,67,-77,30,17,0,-44,10,-15,-63,43,-20,7,28,-38,6,17,22,-20,37,109, 
  /* [2][0][][] */ -7,55,-127,-16,59,67,90,92,-39,-75,-11,26,-14,4,33,-31,20,-7,-82,60,0,-10,91,31,24,26,3,-29,33,-33,53,-71,1,31,-15,23,-101,-70,45,92,-29,-42,20,21,21,-28,-6,40,14,46,-36,-13,72,-30,36,103,-3,9,32,-21,53,57,49,-43,-4,-1,-46,22,-71,-54,14,-44,-63,-80,-10,66,85,82,11,12,15,-47,28,14,-22,5,24,30,26,40,20,-48,4,-64,-70,23, 
  /* [3][0][][] */ 62,25,71,-1,44,-45,32,-42,-14,-51,24,-42,29,28,49,51,30,5,45,-4,126,63,65,39,43,-1,-3,-40,62,1,0,89,-113,58,13,-36,13,7,7,-23,-70,-29,41,21,22,36,-17,-113,-68,1,-26,77,32,-74,-36,5,-127,78,18,20,-1,121,-19,-37,38,42,11,-22,50,-1,2,-57,50,-40,29,-21,-4,34,76,38,-34,-68,30,10,-38,32,6,45,26,7,42,-23,56,94,62,24, 
  /* [4][0][][] */ 42,-7,15,-17,127,18,-30,4,-32,-48,-38,-27,-32,2,-2,46,9,-59,-21,56,-29,-38,42,-28,-3,29,-4,-31,19,-19,67,-30,63,-2,-34,6,14,36,-12,21,-26,-19,-24,-40,-16,-78,0,2,37,12,-26,-12,-49,-40,44,-26,18,-28,-10,16,6,45,67,31,44,41,-6,5,-33,12,33,62,0,-42,-22,-23,43,44,24,-21,26,-21,19,-11,-35,-9,18,34,-27,16,-7,-51,-3,-19,25,-21, 
  /* [5][0][][] */ 4,-6,-16,17,11,-36,29,-44,-32,-41,-14,18,25,9,13,-2,-5,-5,8,-32,38,59,-59,81,10,-13,8,-105,21,13,39,42,-19,28,13,-59,39,40,-10,-28,-5,0,5,-4,3,42,4,-28,-8,2,15,20,-2,-16,-13,-57,-15,26,-30,17,62,23,0,43,-16,44,14,104,-6,98,24,28,1,7,-6,70,-55,27,45,4,-15,-36,10,36,-14,11,-1,127,16,25,5,-41,22,47,-55,38, 
  /* [6][0][][] */ 33,-57,16,-53,-20,2,41,21,4,-11,-5,-88,-10,12,-22,30,13,-9,3,-16,-5,104,15,15,-5,-1,2,-43,12,22,35,13,53,40,51,-18,5,-26,12,-127,-21,90,-5,-58,31,9,-15,29,-35,37,-12,94,11,-38,-26,-49,-12,-42,-17,18,-21,63,34,-88,42,-31,16,-8,25,24,121,-6,-20,-18,-16,23,-82,16,31,-19,6,47,17,3,-36,26,33,30,-8,26,49,-47,-5,22,-21,4, 
  /* [7][0][][] */ 18,127,36,10,86,32,57,-42,-25,-5,21,13,-23,26,38,2,-6,-44,6,30,14,24,41,32,-19,0,18,-20,29,-10,7,21,3,34,-39,0,30,39,13,78,-42,11,6,46,-8,5,5,-61,-6,-26,21,26,5,-52,-50,42,18,9,-34,-6,6,-12,-15,7,-57,59,-23,-60,-10,-4,6,73,-2,-22,-5,3,29,62,70,-20,-62,-43,-11,28,-21,36,0,-6,-12,28,5,-67,-60,12,45,23, 
  /* [8][0][][] */ -7,8,61,24,-127,-24,49,-23,21,68,46,2,-1,28,22,-2,-60,7,9,-12,2,60,-113,79,4,-52,51,-21,17,-7,-2,60,62,5,18,-6,-16,-14,5,-3,21,-6,45,5,-7,40,34,19,-95,20,11,61,-48,-5,-74,22,4,-18,-109,-2,8,-22,-46,-9,-6,65,-7,-34,14,9,-24,-25,42,39,45,-17,-56,-55,28,8,-92,-4,-11,3,10,32,67,36,15,-35,30,40,12,22,42,20, 
  /* [9][0][][] */ -7,-127,-78,31,75,92,-39,-33,30,-60,67,120,-50,37,75,-66,6,-46,3,41,-55,-106,53,-7,-32,12,26,47,-67,9,-24,-60,25,-54,-105,29,14,-13,13,105,12,-57,7,61,-56,-61,-91,-20,28,-1,-26,-87,40,-2,21,-29,29,66,7,0,31,-62,-26,116,-91,19,-15,-73,-9,-16,-72,-69,27,43,-38,1,53,-78,-11,19,-2,-28,-3,18,28,-59,40,-22,7,-18,-64,66,-71,-67,-5,-61, 
  /* [10][0][][] */ -32,-29,-24,-17,-14,9,64,-64,40,22,1,53,32,-30,-10,-9,-44,6,-13,-36,-36,-7,20,31,-18,33,-15,-124,27,-57,89,-27,21,10,20,25,-7,64,-12,23,33,-22,33,-45,2,-20,13,-1,22,40,-33,-13,-61,-26,1,-33,36,12,15,-42,33,27,-13,41,-67,121,-12,4,3,-14,-8,-1,-61,13,47,71,-37,55,-22,33,14,14,28,60,13,-64,-6,127,17,-21,18,0,30,-41,75,-74, 
  /* [11][0][][] */ -101,40,-23,16,8,-81,-5,-20,-73,10,-13,44,49,41,-23,-47,59,-5,-86,-85,44,64,-11,31,68,1,86,-11,-13,19,-33,34,-33,58,-4,-28,11,16,52,-37,-23,0,-3,28,125,70,97,4,77,70,-10,84,28,-55,-10,-9,-106,-7,-74,-48,-3,10,-17,26,-25,-28,37,14,16,10,8,43,-23,7,26,7,-45,111,-96,71,-63,-27,-70,-63,127,32,64,-8,33,63,-18,-116,-2,88,-26,20, 
  /* [12][0][][] */ -18,-10,-7,-17,82,24,-29,9,-16,-2,2,-37,6,-26,46,29,-53,-2,33,-47,-6,-31,-54,23,-30,83,-52,100,9,6,-24,35,9,53,38,51,-40,5,-32,7,24,-25,-1,-93,-19,-52,39,35,-22,-21,12,-25,-52,17,14,-77,-2,-3,45,38,-15,-27,8,38,47,-127,28,72,1,-95,-10,45,-26,-10,10,78,-14,-2,-54,7,11,52,-41,-3,42,-19,-32,-75,-17,5,-29,47,-59,4,-1,3, 
  /* [13][0][][] */ -47,59,-25,-26,-68,-1,-3,60,-63,-37,70,-30,47,6,-19,0,-14,34,-57,-6,20,65,47,-70,76,8,40,-2,32,-19,-41,-69,-98,-11,-24,-54,28,6,64,-39,-48,71,1,3,63,27,-9,3,31,27,26,41,53,-46,62,-32,-99,42,23,-2,18,37,-32,-30,23,-13,-4,7,35,21,52,-127,47,-40,-94,5,94,55,-57,-33,57,-29,-10,-49,35,-38,78,18,-40,29,7,-9,22,-58,-36,32, 
  /* [14][0][][] */ -31,11,-12,-50,19,9,-20,35,-83,17,1,8,-43,-40,-76,-38,-87,-21,52,13,1,-32,-4,-127,-30,-3,-36,2,-12,-17,-9,-33,-17,-47,27,12,-13,11,-23,4,18,52,-46,-15,-44,4,11,22,110,-27,31,-29,15,59,-81,34,-13,14,-70,14,-1,22,33,20,12,2,-16,-27,-48,10,41,17,16,-15,-27,18,36,-102,-45,-73,24,-24,-11,-4,40,-78,-37,12,-36,21,3,92,-4,-7,12,-38, 
  /* [15][0][][] */ -76,-83,-20,-42,-17,21,-10,-97,-39,20,5,-53,25,-3,44,-9,-91,-1,-37,8,-13,27,-90,-46,-23,-22,-17,-12,-18,16,33,-94,-4,58,22,17,-15,0,-115,-6,70,-64,-2,11,-18,-46,58,40,39,28,-4,-113,9,29,-27,28,70,1,-36,39,-9,-30,39,-19,-1,-8,-6,17,-12,41,3,33,-27,-14,-3,-39,-49,-30,6,15,-31,51,-47,80,-14,-27,-49,-40,-47,50,36,127,-37,8,-30,-9, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.031540706753730774, 0.017114141955971718, 0.0079109398648142815, 0.010729086585342884, 0.023215102031826973, 0.014499570243060589, 0.016459466889500618, 0.014014147222042084, 0.013507881201803684, 0.010606665164232254, 0.025074856355786324, 0.018039913848042488, 0.01270041149109602, 0.0097170565277338028, 0.023565026000142097, 0.017747949808835983, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 29026, 61248, 2075, -130, 16089, -4329, 515, -307, 6303, 16379, -2880, -563, 394, 5182, 5421, -9805, -3550, -1288, -203, 15110, -10260, 21419, -2809, 4846, 26675, -565, -4469, 16516, 12676, -20029, 2388, 21961, 23088, -9734, 345, 1420, -101, 2077, 6100, -6097, -6896, -394, -11600, -978, 31395, -3392, 12912, -2609, -14637, 266, 71, -4, -2812, 21867, -4776, 13135, 19889, -392, 37930, -795, -9384, -1436, 2983, 377, -495, 8916, -1432, -6112, -3193, 4108, 386, -5020, -309, 282, -2611, -6378, -1888, -1568, 62122, -8975, -6062, -9986, -659, 27, 68418, -12461, -9649, -27467, -6111, 10881, -1144, 38743, -736, -2164, -1899, -22, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 8.7784472270868719e-05, 9.4213282864075154e-05, 0.00013102035154588521, 0.00021389428002294153, 0.00023733724083285779, 0.00017704349011182785, 5.6955461332108825e-05, 0.00010526723781367764, 0.00022478241589851677, 0.00014609012578148395, 0.0002811169542837888, 0.00012947863433510065, 0.00028175584156997502, 0.00020931214385200292, 0.00035512755857780576, 0.00014860414376016706, 0.00022236545919440687, 0.00019866431830450892, 0.00019743786833714694, 8.1706020864658058e-05, 8.0659920058678836e-05, 5.0812148401746526e-05, 0.00014564464800059795, 0.00010566508717602119, 8.1481295637786388e-05, 0.0001174629433080554, 0.00017609070346225053, 0.00017603010928723961, 7.9787772847339511e-05, 0.00043407746125012636, 0.00034198607318103313, 0.00022490516130346805, 0.00010367194772697985, 0.00015981830074451864, 0.00021637008467223495, 0.00042648785165511072, 0.0004289978533051908, 0.00025342145818285644, 0.00023448132560588419, 0.0001400311739416793, 0.00021410321642179042, 0.00021238901535980403, 0.00032398931216448545, 7.7558303019031882e-05, 0.00034088999382220209, 0.00010601260146358982, 0.00010273075167788193, 0.00027821393450722098, 0.00072938238736242056, 9.3785238277632743e-05, 0.00042747860425151885, 0.00016686375602148473, 0.00020243905601091683, 0.00012863159645348787, 0.00018587264639791101, 0.00012709989096038043, 0.00014127451868262142, 0.00039390404708683491, 4.5034765207674354e-05, 0.00015097287541721016, 0.00029664000612683594, 0.00028051363187842071, 0.00010899682820308954, 0.00015798603999428451, 0.00014568057667929679, 0.00016251127817668021, 0.0002702822966966778, 0.00036021159030497074, 0.00019104396051261574, 8.3275917859282345e-05, 0.00017833162564784288, 9.3939750513527542e-05, 0.00030836468795314431, 0.00014807294064667076, 0.0002786468539852649, 0.00030243713990785182, 0.0001612428022781387, 9.1423127742018551e-05, 4.2046769522130489e-05, 0.00014408260176423937, 0.00024544878397136927, 0.00024359281815122813, 0.00016497416072525084, 0.0002535198291298002, 5.0718852435238659e-05, 0.00011934621579712257, 7.0768976002000272e-05, 0.00049451139057055116, 0.00023783760843798518, 0.00011132559302495793, 0.00038763417978771031, 3.8726855564163998e-05, 0.00015218157204799354, 0.00011324037041049451, 0.00042741285869851708, 0.00028482708148658276, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-77,-15,127,21,72,93,-63,-17,-17,-16,1,-28,0,37,2,-12,-39,28,18,28,-127,127,8,-92,9,49,-30,-127,-127,39,25,5,32,65,-18,-30,-12,26,1,-14,28,-107,70,24,-64,36,49,-19,53,-22,19,-1,-9,19,49,-94,-48,-56,-17,-9,2,9,36,66,-25,74,11,-8,21,20,127,25,23,22,2,-6,19,127,-10,-15,12,-25,20,121,20,-81,-17,-2,-37,-17,-49,4,-26,-17,25, 127,-127,64,105,-44,127,55,-119,72,0,-19,127,127,-103,-14,24,11,127,127,-109,127,-61,85,65,-127,-107,-67,-32,-48,46,-60,-21,-93,53,-127,-85,-44,-18,-54,70,0,127,127,88,-56,-112,-115,-51,-16,-127,43,84,55,-32,54,84,-52,42,-78,-114,-43,-37,-66,71,71,-57,27,31,-81,34,-19,91,114,127,13,20,7,63,-35,59,67,127,127,-22,-8,77,-123,127,-127,-100,3,-127,-86,-127,-39,106, -76,-16,25,-81,13,-18,72,-10,80,-36,-29,20,-14,-5,-10,-10,-12,-11,4,-5,-17,-108,31,6,-119,85,4,-54,124,50,-16,11,0,13,18,-33,-12,32,18,19,29,12,-118,65,15,-17,37,17,-15,12,-16,6,-13,-1,-2,23,-71,6,-32,55,2,43,31,-4,-6,-36,-29,24,6,4,-3,42,14,-23,-7,5,-7,-8,-88,3,-23,-22,-21,1,-111,13,-39,-23,-51,24,-28,-45,30,-30,-14,7, 
  /* [0][1][][] */ -67,-75,65,-37,-48,99,26,127,-55,-23,-2,-108,24,-115,77,29,-6,-59,-19,86,50,-66,44,48,-93,-15,127,-21,-24,68,121,-99,-127,89,-81,-58,-35,30,-33,89,-48,-25,-2,43,-46,127,-22,69,16,99,20,-1,16,-54,36,28,127,124,-71,-88,127,-35,-41,127,69,-34,-13,0,127,40,127,93,-37,99,-8,11,14,13,-33,6,-44,119,-76,112,2,29,-53,30,78,-127,-34,-10,127,-64,-23,-1, 66,122,51,-114,127,76,112,34,-127,127,127,-37,-66,-127,-127,127,127,-61,-122,-47,95,97,-125,127,-94,-79,-44,127,-125,108,-127,-127,-81,127,114,127,127,-127,-111,127,-62,-95,116,-127,-127,-35,-127,-127,127,-115,84,43,127,127,127,-127,101,-127,-127,127,18,-81,-127,-101,-127,127,-127,127,-123,-127,-108,-81,-127,-81,127,127,-127,127,-79,127,127,33,-41,-127,59,127,95,47,124,12,127,5,-66,35,127,-127, -55,-13,-49,38,-58,-90,39,-23,17,-35,-32,87,1,99,13,8,-5,65,-6,119,2,-97,-42,9,-77,94,-70,-17,-69,-18,13,-61,-70,43,9,-19,-29,43,-67,44,127,-5,-37,28,-41,-53,17,46,10,121,-13,5,-38,-71,8,20,93,5,-3,25,-33,127,90,-55,-44,14,32,-6,-78,126,-20,-78,3,-54,-17,-21,28,14,78,-40,-72,-40,56,12,-49,-14,71,22,15,61,-48,7,-41,94,-26,-3, 
  /* [0][2][][] */ -70,-2,-9,-22,11,-42,71,26,53,-27,-37,3,15,18,-25,3,-9,64,7,1,-55,-78,5,-10,-31,-42,33,-66,96,42,26,23,14,-6,-8,-50,-6,30,-6,0,-13,-6,-66,103,5,35,12,39,-15,-32,10,-21,20,-2,11,14,-72,23,-14,12,17,4,-22,-4,-2,-42,-44,13,-31,15,26,34,17,-21,28,2,19,5,-80,-15,-7,-16,18,16,-127,0,12,-44,-61,-51,-31,-54,12,61,-19,-7, 121,30,-127,-36,-74,-22,49,33,-67,-28,-19,-104,-77,112,-12,43,4,-48,-6,-127,89,-59,-34,7,-102,127,-49,23,-28,-22,-8,-12,-63,19,25,1,-22,-33,127,53,16,-12,70,-29,-39,76,-70,-44,-33,-8,-127,-127,-48,-24,9,39,-74,-8,7,40,-8,-16,7,-49,-55,37,61,-21,114,107,-25,-67,13,-58,1,3,103,5,49,27,17,-109,-45,4,4,5,127,40,-67,32,-20,-108,40,81,-7,28, -56,8,-19,28,13,-61,-127,6,-13,-9,-18,5,12,-24,18,1,-8,-10,5,15,-53,-86,17,9,7,-82,16,5,-43,-42,-7,12,41,-15,-4,-31,-35,0,41,-42,26,-3,-48,-27,2,70,24,18,-8,-2,12,-10,11,4,0,-2,-63,-12,-4,-35,-11,16,85,-16,32,1,0,28,-1,10,-4,27,-13,14,-1,16,38,-2,78,-11,3,-13,-7,-18,72,2,41,-39,58,37,-19,-61,-8,3,-13,-11, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0037308400496840477, 0.0040040644817054272, 0.0055683646351099014, 0.0090905064716935158, 0.010086832568049431, 0.0075243483297526836, 0.0024206070229411125, 0.004473857581615448, 0.0095532527193427086, 0.0062088305130600929, 0.011947469785809517, 0.0055028419010341167, 0.011974622495472431, 0.0088957659900188446, 0.015092920511960983, 0.0063156760297715664, 0.0094505315646529198, 0.0084432335570454597, 0.0083911092951893806, 0.0034725058358162642, 0.0034280465915799141, 0.0021595163270831108, 0.0061898976564407349, 0.0044907662086188793, 0.0034629551228135824, 0.0049921749159693718, 0.0074838548898696899, 0.0074812797829508781, 0.0033909801859408617, 0.018448291346430779, 0.014534407295286655, 0.0095584690570831299, 0.0044060577638447285, 0.0067922775633633137, 0.0091957282274961472, 0.018125733360648155, 0.018232408910989761, 0.010770411230623722, 0.0099654560908675194, 0.0059513249434530735, 0.0090993866324424744, 0.0090265329927206039, 0.013769545592367649, 0.0032962276600301266, 0.014487824402749538, 0.0045055355876684189, 0.0043660569936037064, 0.011824091896414757, 0.030998751521110535, 0.0039858724921941757, 0.01816784031689167, 0.0070917094126343727, 0.0086036594584584236, 0.00546684255823493, 0.0078995870426297188, 0.0054017454385757446, 0.0060041667893528938, 0.016740921884775162, 0.0019139774376526475, 0.0064163473434746265, 0.01260720007121563, 0.011921828612685204, 0.004632364958524704, 0.0067144064232707024, 0.0061914240941405296, 0.0069067291915416718, 0.01148699689656496, 0.015308992005884647, 0.0081193679943680763, 0.003539226483553648, 0.007579093798995018, 0.0039924392476677895, 0.013105499558150768, 0.0062930998392403126, 0.01184249110519886, 0.012853577733039856, 0.0068528191186487675, 0.0038854829035699368, 0.0017869876464828849, 0.0061235101893544197, 0.01043157372623682, 0.010352694429457188, 0.0070114019326865673, 0.010774592868983746, 0.0021555512212216854, 0.0050722141750156879, 0.0030076815746724606, 0.021016733720898628, 0.010108098387718201, 0.0047313375398516655, 0.016474451869726181, 0.0016458913451060653, 0.0064677167683839798, 0.0048127155750989914, 0.018165046349167824, 0.012105150148272514, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1426, 4917, 10285, 26630, 22850, -3752, -2029, 4808, 18526, -3505, 9952, 4516, 9987, 8731, 21438, 1225, 2753, 5495, 11485, 3916, -74, 541, 14648, -1089, 3828, -336, 11287, 7598, 3950, 36033, 30571, 16192, 9548, -784, 7788, 3884, 2253, 5947, 19750, -931, 12886, 7543, 30367, -3247, 29236, 8210, 4900, 12398, 56210, 8565, -296, 8735, -3664, -2, -2309, 7820, -216, 16113, 4646, 5709, 5487, 11348, 4600, 5646, 8416, 8452, 5886, -5096, 5203, -1937, 4613, 7358, 14428, 5537, -3692, -4803, 5988, 305, 1839, -800, 17723, 11746, 3902, 14927, 1734, 137, 9971, 74588, 6415, 10066, 7827, -373, 5394, 7840, 6525, 12807, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00028711435152217746, 0.00028754357481375337, 0.00018140139582101256, 8.6291060142684728e-05, 0.00013653289352077991, 0.00027387298177927732, 0.00045921187847852707, 0.00035574764478951693, 0.00012536300346255302, 0.00039869264583103359, 0.00026839514612220228, 0.0001851462438935414, 0.00012245876132510602, 0.00027016064268536866, 0.00011248706869082525, 0.00049337488599121571, 0.00019425278878770769, 0.00022478151367977262, 0.00019106983381789178, 0.00028111541178077459, 0.00037557084579020739, 0.00042742013465613127, 0.00013520510401576757, 0.00060852878959849477, 0.00065880652982741594, 0.00031896837754175067, 0.00020173845405224711, 0.00018878215632867068, 0.00041146902367472649, 9.6890114946290851e-05, 9.2319140094332397e-05, 0.00015126894868444651, 0.00016725990280974656, 0.0003383464936632663, 0.00025129207642748952, 0.00016899961337912828, 0.00027556068380363286, 0.00025873977574519813, 0.000135164795210585, 0.00077937706373631954, 0.00014517977251671255, 0.00021405442385002971, 8.78345817909576e-05, 0.00030109676299616694, 0.00011351744615240023, 0.00018423619621898979, 0.00035629828926175833, 0.0002092624781653285, 7.3511939262971282e-05, 0.00023663668252993375, 0.00031868816586211324, 0.00018965038179885596, 0.00030672905268147588, 0.00034605732071213424, 0.0004832427657674998, 0.00015244736277963966, 0.00020628402126021683, 0.00011867599096149206, 0.00044592155609279871, 0.00026386548415757716, 0.00029610146884806454, 0.0001238090917468071, 0.00033431791234761477, 0.00018300587544217706, 0.00029773666756227612, 0.00022435652499552816, 0.00022140720102470368, 0.00026834005257114768, 0.00032412674045190215, 0.00031517795287072659, 0.00023955629148986191, 0.00022365197946783155, 0.00014369041309691966, 0.00019707213505171239, 0.00041239781421609223, 0.00026868106215260923, 0.0002603757893666625, 0.0003038517024833709, 0.000402315694373101, 0.00044032541336491704, 0.0001154052370111458, 0.00014384825772140175, 0.00022705120500177145, 0.00013379464508034289, 0.00067089655203744769, 0.00025037635350599885, 0.00023460641386918724, 5.1888415327994153e-05, 0.00021733131143264472, 0.0002213472907897085, 0.00016866208170540631, 0.00036733358865603805, 0.00027717900229617953, 0.00020361540373414755, 0.00017456189380027354, 0.00012977165170013905, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 21,43,-77,73,56,-1,17,-14,-32,19,-43,80,-24,-83,43,-127, 
  /* [1][0][][] */ 7,39,-6,-8,25,-13,127,-89,0,86,14,-45,12,-27,23,-11, 
  /* [2][0][][] */ -127,90,38,21,10,23,-30,59,-52,4,62,30,-89,2,11,-54, 
  /* [3][0][][] */ -45,19,11,56,-43,14,88,116,38,105,-127,39,69,-42,-42,-23, 
  /* [4][0][][] */ -14,-13,81,104,-63,127,-1,29,69,-47,-44,35,33,4,-89,0, 
  /* [5][0][][] */ -23,-3,21,-4,10,57,-13,50,-60,125,-35,-127,-25,8,-23,-53, 
  /* [6][0][][] */ -5,28,-14,-37,17,100,-82,-55,-19,8,41,-25,127,-61,12,-29, 
  /* [7][0][][] */ 4,-22,127,-4,-35,-36,30,-27,-43,38,-53,-75,-4,-2,30,-8, 
  /* [8][0][][] */ 11,38,127,72,-46,53,-14,21,21,-17,5,-49,-36,-14,-59,-46, 
  /* [9][0][][] */ 30,-86,58,9,-6,-25,-39,-8,127,14,82,-28,-52,28,-67,-87, 
  /* [10][0][][] */ -41,-77,35,5,-70,-11,10,17,108,127,95,-37,-32,44,57,-9, 
  /* [11][0][][] */ -35,-60,41,-127,-10,-31,-126,-99,-65,117,49,2,-62,-26,97,-113, 
  /* [12][0][][] */ 47,-26,-9,-84,2,-45,-106,-7,-49,-127,-15,-14,48,124,48,56, 
  /* [13][0][][] */ -32,-86,-43,29,-23,-28,-6,-35,44,-15,-53,24,22,16,127,56, 
  /* [14][0][][] */ -12,-57,28,8,-8,2,16,118,-3,58,7,-32,-13,14,-42,127, 
  /* [15][0][][] */ 13,-15,-13,56,10,-10,86,-1,8,-127,9,-29,-2,-25,-9,-28, 
  /* [16][0][][] */ 52,-51,-66,45,8,9,39,-41,79,67,102,-21,8,115,127,94, 
  /* [17][0][][] */ -76,-20,-19,40,127,125,27,-48,47,2,26,-82,50,6,-14,42, 
  /* [18][0][][] */ -14,3,-46,12,-66,-26,-30,54,-64,-10,23,-127,-8,-115,44,-57, 
  /* [19][0][][] */ 113,-29,30,-6,41,41,-54,127,87,-60,12,90,-2,93,-1,125, 
  /* [20][0][][] */ 21,-6,97,-40,38,5,-43,69,-28,-24,98,17,3,10,-45,127, 
  /* [21][0][][] */ -111,30,15,1,-51,81,-74,-37,-99,71,36,-90,-127,-51,-31,-31, 
  /* [22][0][][] */ 29,-18,19,-60,29,-102,-23,-27,-127,30,29,-61,-46,-25,97,-31, 
  /* [23][0][][] */ 37,-1,35,-17,12,8,-14,1,-13,-13,24,-25,127,-5,11,-28, 
  /* [24][0][][] */ -25,-7,2,-80,-42,-69,62,0,-31,-17,-38,-127,40,-28,82,37, 
  /* [25][0][][] */ -69,8,-94,-15,52,-91,-60,10,-31,73,-23,-87,28,-127,-11,-42, 
  /* [26][0][][] */ -15,-11,20,-87,92,-39,17,17,124,-16,62,-45,32,127,59,65, 
  /* [27][0][][] */ 82,-30,33,-29,-28,-44,2,-10,-25,20,-127,26,21,-7,1,37, 
  /* [28][0][][] */ -127,-25,-80,-105,64,30,88,-47,-35,41,-94,7,81,21,-99,60, 
  /* [29][0][][] */ -71,-53,-34,127,14,5,19,-117,-37,-6,-73,24,20,-114,96,-58, 
  /* [30][0][][] */ 94,-31,127,-24,22,87,-1,20,-41,-19,49,-3,-45,9,-48,41, 
  /* [31][0][][] */ 0,-87,7,-50,-4,-51,-13,-54,-4,38,100,8,2,76,88,127, 
  /* [32][0][][] */ 27,65,-42,18,-127,46,-104,-74,-62,-67,-3,85,-1,46,46,116, 
  /* [33][0][][] */ 8,3,35,125,15,-21,-24,-53,-122,73,115,-62,4,-19,-3,127, 
  /* [34][0][][] */ 1,-37,24,-22,74,-30,-127,-16,-62,97,-54,2,-18,26,-28,10, 
  /* [35][0][][] */ 57,-6,6,-1,57,-127,-122,-83,7,28,-93,104,79,38,63,0, 
  /* [36][0][][] */ 0,-3,-127,-12,29,-9,-12,4,-16,-12,16,-16,-16,12,-3,10, 
  /* [37][0][][] */ 67,-29,127,19,-68,-28,54,-4,-17,58,-32,46,92,-20,1,20, 
  /* [38][0][][] */ -127,41,3,-12,4,82,-34,-51,-20,-20,76,-43,-52,13,10,-64, 
  /* [39][0][][] */ -6,8,11,31,22,-14,-127,28,11,26,-20,-43,19,-12,-4,-29, 
  /* [40][0][][] */ -92,110,-41,127,-2,91,61,-38,-65,-9,25,-33,5,-12,-64,-85, 
  /* [41][0][][] */ 7,56,-77,-7,-3,-5,127,30,-83,59,-61,21,-30,94,45,-29, 
  /* [42][0][][] */ 25,-77,9,17,-34,124,-127,39,96,-73,35,5,-49,63,-71,-2, 
  /* [43][0][][] */ -85,29,21,-33,48,43,-127,-89,-28,57,-15,-18,-100,-29,2,23, 
  /* [44][0][][] */ -16,4,-25,3,20,-66,13,-37,127,9,39,36,-15,91,37,42, 
  /* [45][0][][] */ -84,-80,8,-121,85,-5,-32,4,-40,-127,6,9,26,90,30,97, 
  /* [46][0][][] */ -36,4,-45,71,-99,-13,0,-98,-127,38,-38,-19,-41,27,-41,-51, 
  /* [47][0][][] */ -5,-6,-106,127,52,69,-14,-38,10,43,40,86,19,-29,40,-54, 
  /* [48][0][][] */ -54,-25,4,-127,-2,-23,-32,18,-44,-6,8,-20,-20,71,95,70, 
  /* [49][0][][] */ 0,60,44,111,-20,41,-67,-101,37,-29,-86,-13,-14,-84,-92,-127, 
  /* [50][0][][] */ 18,66,33,-127,72,-29,1,84,118,-20,-36,-8,-8,-43,22,-16, 
  /* [51][0][][] */ -5,-88,29,-34,50,-45,-54,-121,-27,-127,67,-57,-2,-14,-1,-40, 
  /* [52][0][][] */ 32,-30,-22,37,-22,-61,-35,98,-103,127,-67,-19,113,98,6,-11, 
  /* [53][0][][] */ -22,63,26,-63,-36,17,40,2,-33,-3,-25,56,-2,-127,-89,-2, 
  /* [54][0][][] */ 3,16,19,50,67,-30,-18,-71,-20,-6,-22,-26,-12,127,-12,-49, 
  /* [55][0][][] */ -90,127,64,-19,41,4,2,-26,-78,49,97,-62,-14,-29,94,-35, 
  /* [56][0][][] */ 42,-18,53,-127,57,-3,-1,-18,44,-46,15,106,-3,49,90,86, 
  /* [57][0][][] */ -11,2,17,72,-30,11,44,127,-3,-5,-26,-35,39,9,-19,10, 
  /* [58][0][][] */ 3,82,32,-127,17,48,-9,31,91,15,-6,110,26,-75,4,82, 
  /* [59][0][][] */ 16,39,47,-53,-34,34,16,4,20,22,-7,-35,-8,-127,-42,-29, 
  /* [60][0][][] */ 52,-42,127,-40,-40,102,48,-31,-26,15,-44,-18,53,-4,42,-21, 
  /* [61][0][][] */ 12,-28,-20,-17,-30,13,78,109,-7,127,29,24,-23,60,13,10, 
  /* [62][0][][] */ 13,-3,10,14,-37,11,-53,8,-29,44,12,-127,-12,-94,39,31, 
  /* [63][0][][] */ -2,-87,-50,-71,36,-8,-114,-127,-49,127,5,-38,10,-20,23,-81, 
  /* [64][0][][] */ -3,4,-1,21,59,-25,-21,-105,2,-127,9,-44,3,-10,-19,17, 
  /* [65][0][][] */ -127,18,22,-62,40,109,64,-46,-88,22,58,-22,26,28,-18,-8, 
  /* [66][0][][] */ 99,-11,65,-43,-14,43,-114,-4,-127,-100,82,-96,24,68,-83,-50, 
  /* [67][0][][] */ 29,-23,-19,68,31,-22,-79,-99,31,-45,-109,-2,-49,1,-127,-12, 
  /* [68][0][][] */ 44,-11,15,21,-54,-48,-3,-61,-8,-20,33,39,-8,48,127,6, 
  /* [69][0][][] */ -34,62,-15,38,16,-127,45,42,-12,-52,27,-17,43,105,-4,83, 
  /* [70][0][][] */ -8,-31,-39,-23,-18,22,127,102,-29,77,1,-12,3,59,22,-19, 
  /* [71][0][][] */ 17,-41,-2,-30,21,-3,-8,58,-31,-18,-10,12,21,-127,15,-31, 
  /* [72][0][][] */ -9,60,-3,33,59,-38,-37,-127,35,55,-40,7,22,69,19,16, 
  /* [73][0][][] */ -27,-127,-10,-83,-112,-14,50,-29,-34,-18,-51,-37,16,-49,104,2, 
  /* [74][0][][] */ -45,74,34,96,-34,-26,-127,105,17,-26,-39,-46,5,8,-28,24, 
  /* [75][0][][] */ -64,16,-14,39,-41,96,88,112,8,64,27,-24,-97,127,32,-5, 
  /* [76][0][][] */ 12,39,-41,9,82,-85,-127,-108,-35,-17,16,-41,-13,25,48,2, 
  /* [77][0][][] */ -50,39,-73,-55,-22,0,-40,-85,127,2,-70,11,-26,48,41,-120, 
  /* [78][0][][] */ -76,-112,-49,86,69,98,-4,48,-30,-30,-108,73,31,-76,127,43, 
  /* [79][0][][] */ 64,-7,47,-60,127,25,66,30,63,22,-33,-11,27,-16,23,-27, 
  /* [80][0][][] */ -55,-24,26,-127,39,-82,-11,-22,-84,-87,11,-33,-54,100,-101,26, 
  /* [81][0][][] */ 23,28,40,44,11,63,-29,-44,-50,-17,-12,-36,-81,23,-127,36, 
  /* [82][0][][] */ -37,-27,-60,-94,-6,-124,-10,-26,-33,39,-51,-81,-4,-127,-39,0, 
  /* [83][0][][] */ -18,7,-16,-102,-57,-3,-4,-3,-57,87,69,-84,6,-127,-22,61, 
  /* [84][0][][] */ 127,16,14,36,-28,-2,-34,28,-1,7,79,16,-38,5,50,-51, 
  /* [85][0][][] */ -6,-26,44,-127,35,-71,-83,91,-91,-116,-69,-46,-3,91,98,-83, 
  /* [86][0][][] */ 50,-3,63,13,-64,70,-59,92,-81,-85,87,4,54,-127,16,65, 
  /* [87][0][][] */ 127,-56,19,-4,-14,-32,-17,26,23,27,-106,-39,55,9,1,15, 
  /* [88][0][][] */ 38,20,-18,30,-19,-9,11,-38,54,-13,10,36,-51,-39,127,-62, 
  /* [89][0][][] */ 109,90,-115,-47,-103,-62,37,-82,90,13,28,8,9,54,10,-127, 
  /* [90][0][][] */ -17,-58,32,-106,-69,77,112,-85,110,-75,43,-127,67,19,-29,-42, 
  /* [91][0][][] */ -62,-54,-13,-110,-26,-8,0,-74,24,57,85,83,47,9,127,124, 
  /* [92][0][][] */ 31,-9,24,12,44,16,-65,-127,33,-71,-22,-10,-37,8,19,-48, 
  /* [93][0][][] */ 53,-6,36,-119,12,-1,-31,32,34,-63,127,-13,-1,104,-9,34, 
  /* [94][0][][] */ -108,98,-127,-25,91,-95,-38,-81,-26,0,80,-55,-25,-12,-16,4, 
  /* [95][0][][] */ -19,30,52,-127,56,27,-77,-62,75,-19,-39,-48,17,56,-70,0, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0008137826225720346, 0.00081499922089278698, 0.00051415507914498448, 0.00024457907420583069, 0.00038698205025866628, 0.00077625195262953639, 0.0013015673030167818, 0.0010083133820444345, 0.00035532264155335724, 0.0011300345649942756, 0.00076072581578046083, 0.00052476930432021618, 0.00034709103056229651, 0.00076572987018153071, 0.00031882774783298373, 0.0013983972603455186, 0.00055058044381439686, 0.00063710950780659914, 0.00054155883844941854, 0.00079677952453494072, 0.0010644992580637336, 0.0012114583514630795, 0.00038321860483847558, 0.0017247836804017425, 0.0018672883743420243, 0.00090406805975362659, 0.0005717974272556603, 0.00053507473785430193, 0.001166247297078371, 0.00027462051366455853, 0.00026166476891376078, 0.00042874916107393801, 0.00047407313832081854, 0.00095899245934560895, 0.0007122497190721333, 0.00047900408389978111, 0.00078103551641106606, 0.00073335913475602865, 0.00038310434320010245, 0.0022090275306254625, 0.00041149029857479036, 0.00060670520178973675, 0.0002489539620000869, 0.00085341365775093436, 0.00032174820080399513, 0.00052218989003449678, 0.0010098741622641683, 0.00059312314260751009, 0.00020835857139900327, 0.00067071121884509921, 0.00090327387442812324, 0.00053753558313474059, 0.00086937751621007919, 0.00098084763158112764, 0.0013696792302653193, 0.00043208920396864414, 0.00058468116912990808, 0.0003363693249411881, 0.0012638978660106659, 0.00074788718484342098, 0.00083925528451800346, 0.00035091832978650928, 0.00094757403712719679, 0.00051870272727683187, 0.00084388995310291648, 0.00063590495847165585, 0.00062754552345722914, 0.00076056964462623, 0.00091868866002187133, 0.00089332467177882791, 0.00067898642737418413, 0.00063390802824869752, 0.00040726896259002388, 0.00055857142433524132, 0.0011688797967508435, 0.00076153624104335904, 0.00073799613164737821, 0.00086122209904715419, 0.0011403035605326295, 0.0012480363948270679, 0.00032709885272197425, 0.00040771631756797433, 0.00064354261849075556, 0.00037922087358310819, 0.0019015556899830699, 0.0007096542976796627, 0.00066495675127953291, 0.00014706993533764035, 0.00061599304899573326, 0.00062737573171034455, 0.00047804741188883781, 0.00104115204885602, 0.0007856223382987082, 0.00057711737463250756, 0.00049476954154670238, 0.00036781831295229495, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -6439, -536, -9677, 25551, 33006, 2491, 1256, -17909, 26343, -5159, 30138, 17051, -17481, 18898, 37675, -17422, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00044224679004400969, 0.00029753462877124548, 0.00030691458960063756, 0.00025744197773747146, 0.00037421172601170838, 0.00031490481342189014, 0.00025807399651966989, 0.00033665299997664988, 0.00023200189752969891, 0.00027252812287770212, 0.00032957855728454888, 0.00058241060469299555, 0.00041700899600982666, 0.00044809732935391366, 0.00045753977610729635, 0.00039724734961055219, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 19,7,-1,6,34,94,-35,-18,53,7,7,13,2,28,31,75,1,-22,-5,10,110,-50,-4,-27,-17,-29,-43,-110,-10,-14,61,42,121,-23,-4,18,7,-14,-23,20,-6,22,10,-29,-12,-15,-29,17,-24,30,-1,-7,-38,-17,-1,-12,68,24,-10,-42,-60,24,-28,-34,20,12,42,24,-3,18,-10,-37,-70,0,-5,-6,-5,-69,10,-16,64,-24,-68,-42,37,3,9,-6,-4,7,11,-26,29,16,-15,127, 
  /* [1][0][][] */ 46,-102,38,54,-14,-62,-28,-51,-17,-69,-8,20,-28,-47,-20,-64,-73,-1,15,12,-40,-127,-45,28,91,-42,-52,21,-14,86,-9,39,-14,65,-65,22,-3,-28,82,-7,-17,-43,35,-29,-45,4,62,-5,75,27,4,-40,79,-68,35,-24,-26,38,-19,-117,26,-64,14,-30,11,-94,36,22,32,17,-23,-29,-83,63,-20,63,42,65,29,0,-1,31,-96,37,-78,70,-7,101,-48,-9,14,-8,-41,1,53,-6, 
  /* [2][0][][] */ 2,39,14,-27,-5,-41,-6,33,39,-19,-12,51,-23,16,53,-17,25,-22,-19,-2,-32,-17,21,-50,-15,-18,-9,12,-12,20,85,-61,9,-56,2,46,49,106,-13,-26,-27,-10,-4,55,-17,-39,-58,48,28,24,-18,-14,3,4,11,-57,-59,-6,-18,34,4,16,61,95,-2,-53,30,-58,-6,-26,36,23,-14,-27,-61,12,7,66,5,56,7,127,32,13,-24,12,11,16,5,4,3,-52,-3,27,-24,41, 
  /* [3][0][][] */ -30,-16,-31,40,49,-4,-11,-33,-7,6,12,4,23,-7,42,-12,25,-42,-8,-3,6,-4,-39,3,-11,13,4,-1,26,-39,39,-17,13,-14,-23,7,-4,3,-36,1,-5,-59,23,1,29,-35,12,18,-127,18,-22,14,-86,-42,-3,13,14,20,-11,52,0,20,0,29,4,-76,-35,25,47,6,13,40,-26,10,-5,-25,-59,-53,34,-30,-4,-34,13,52,9,28,23,6,15,18,3,14,-3,10,-2,-6, 
  /* [4][0][][] */ 5,-12,20,-54,-11,-16,-30,-32,-36,-35,-27,19,3,46,-28,-12,35,-22,12,10,-32,20,27,15,-12,-16,12,30,25,-26,1,10,-50,-22,-18,9,15,-33,-12,4,10,2,-73,-4,26,-7,13,-19,-16,82,-8,6,-14,-6,10,20,20,-51,51,12,27,6,-6,-25,26,-127,-1,-43,-35,30,1,6,0,3,-29,12,-14,56,45,12,26,18,111,-41,40,-27,-31,-10,69,17,0,35,-30,-11,-7,-38, 
  /* [5][0][][] */ -19,19,-12,-11,-4,-10,12,94,57,-16,-2,-21,-3,31,38,52,5,-28,-24,-31,-50,-10,2,-45,13,7,39,51,74,7,53,45,-42,-18,8,-26,-37,-61,-22,-10,-55,-20,-2,2,58,20,23,36,6,1,-18,12,-36,-10,3,1,-30,-17,-21,30,-56,14,2,-49,16,20,-30,17,7,9,15,32,40,-7,-16,-1,-21,36,6,93,-24,-9,20,27,0,-11,37,-16,-17,15,14,-127,-30,-28,-10,-110, 
  /* [6][0][][] */ -42,-19,-3,-66,-6,5,-11,5,45,17,-11,-24,66,-52,16,36,5,-66,5,10,25,-20,-45,23,93,-7,-3,-11,8,-14,22,-18,5,7,-27,7,40,-4,49,43,-49,-42,-46,-38,-16,-16,20,-127,-17,45,23,8,29,-20,-10,-65,62,-10,-23,8,-8,21,-13,0,57,80,19,-15,2,-12,-15,-27,-13,6,98,-32,-32,39,-9,-18,-54,-65,68,-57,-3,55,68,-60,23,25,-39,-12,-75,-9,-2,26, 
  /* [7][0][][] */ 34,22,20,-19,5,8,-6,-37,-9,-24,-19,8,-16,-72,46,12,-3,-37,-32,10,31,-2,-41,-13,11,7,12,-51,-17,24,8,-7,-4,19,15,-22,5,-23,-54,23,-11,-23,-19,43,-1,7,0,66,-9,9,-31,-22,-31,6,5,-71,0,2,-22,24,13,10,8,3,-10,58,13,-11,-7,-16,-2,61,14,13,-20,13,32,15,-7,-4,-6,-17,53,20,-34,127,12,5,-69,-6,-12,21,-9,12,-8,5, 
  /* [8][0][][] */ -50,26,-56,-6,26,-4,23,51,16,79,-28,21,26,76,64,2,20,7,-105,27,26,16,-5,-9,-44,-31,12,2,60,-73,5,-12,61,-37,9,-9,-34,13,-37,39,1,30,6,-127,-62,-11,29,-13,-33,30,-16,72,-117,92,-3,-17,-2,-16,-39,-2,20,-9,31,19,-26,25,12,-30,4,3,24,100,-19,31,6,30,-20,-73,-14,-79,-37,-28,26,-10,-42,23,15,-51,25,70,-41,-15,33,-30,-37,-29, 
  /* [9][0][][] */ 17,-47,-18,-24,4,-7,-19,33,2,-8,8,18,-34,-28,-14,-13,-54,30,45,-15,-32,13,-1,-21,63,5,7,1,-19,-44,-18,5,-32,106,27,32,-8,57,35,8,-9,32,-20,-51,47,-35,24,-109,-45,3,-20,-15,-7,10,2,3,-14,14,-19,13,10,3,-5,32,21,127,46,8,-7,-12,4,-53,-10,7,-28,-7,73,-10,-2,31,-3,-11,11,-48,7,36,-33,29,-31,-25,-11,-10,-7,21,25,-9, 
  /* [10][0][][] */ 32,59,-16,31,82,-127,-7,-47,-9,46,36,24,-8,20,-2,-87,9,42,-15,38,-112,-16,-2,-4,-60,-19,-39,52,57,0,2,50,0,-39,31,-22,77,-49,-7,-10,-13,88,42,-30,-67,-31,-31,18,-22,-22,-55,0,-16,-11,9,3,-10,15,-17,-35,17,9,-17,22,25,52,34,5,28,4,11,76,-55,-24,-61,-7,-1,8,-21,28,27,16,-83,-67,73,-70,90,12,-37,16,26,10,68,34,11,-125, 
  /* [11][0][][] */ 54,42,-36,20,13,11,65,17,-3,-22,-15,-4,-24,15,49,25,7,-39,-127,-1,19,28,11,-37,-63,-22,2,-4,0,31,-2,-15,-3,-27,39,12,2,47,-24,10,-17,29,70,-109,36,-35,-1,-6,-124,0,-25,-52,20,37,-18,1,-37,-2,-8,34,6,-11,5,14,-44,59,-25,38,34,-13,45,40,-43,-29,7,28,-39,-33,-51,-12,-13,24,104,54,18,-4,-3,0,11,64,-45,-5,20,19,-27,35, 
  /* [12][0][][] */ -25,0,9,-2,-25,53,19,-10,127,-5,-33,1,-13,20,-43,-16,51,-11,9,48,40,40,-8,-20,20,4,15,-53,-106,5,28,-53,6,-44,-2,-26,13,2,-12,5,-7,-26,2,15,-10,69,10,3,16,18,-40,24,-6,19,-10,-26,60,-7,27,40,-8,-26,14,-24,16,42,-43,33,1,12,-1,-20,22,3,-82,-12,7,-1,17,-83,-12,-33,46,67,-8,-3,-9,-31,19,45,-23,49,9,-33,6,18, 
  /* [13][0][][] */ 22,1,-7,41,30,-1,1,-7,4,4,1,7,19,-15,-13,1,39,-75,-62,15,-1,-8,-15,-13,-10,-8,2,-12,-12,-53,-6,0,11,0,4,43,36,-10,18,21,-6,-1,20,51,35,20,-22,-127,12,-8,6,22,-17,-19,10,20,-16,0,30,19,28,47,-29,13,1,-31,-22,-85,18,23,14,-47,-3,37,-4,22,-42,3,22,14,32,-17,-1,21,2,34,26,-12,7,-8,13,10,3,13,-34,-11, 
  /* [14][0][][] */ -127,-82,22,68,26,-30,-51,19,-35,12,-7,19,68,8,-126,-22,54,-22,16,12,-18,-10,44,38,-119,0,23,-9,-14,-52,-40,0,-4,20,45,-56,20,47,-1,4,34,52,-35,-68,14,112,48,55,-117,55,14,18,-52,-15,30,-4,14,14,58,74,59,53,16,56,11,-15,-53,40,-19,91,-56,-82,-69,-5,-17,55,12,16,79,-14,73,-6,19,-5,64,21,33,27,57,24,70,-13,-17,20,19,-40, 
  /* [15][0][][] */ 56,8,23,8,3,38,25,-2,-2,41,6,13,-82,-14,-10,57,20,34,2,5,18,29,-96,22,16,16,33,-1,-12,43,-56,-74,19,-26,43,-6,29,-1,-83,-83,2,12,15,39,7,57,-46,-35,77,-52,-24,13,36,-91,19,-127,-9,-34,12,35,-124,20,22,22,65,-24,-18,51,-24,63,-11,32,45,10,7,-12,-5,-30,39,7,1,5,52,92,-17,-4,16,-64,2,-14,38,1,-71,46,13,-27, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018795488402247429, 0.012645221315324306, 0.013043869286775589, 0.010941283777356148, 0.015903998166322708, 0.013383454643189907, 0.010968144051730633, 0.014307752251625061, 0.0098600806668400764, 0.011582444421947002, 0.014007088728249073, 0.024752451106905937, 0.017722882330417633, 0.019044136628508568, 0.019445439800620079, 0.016883011907339096, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10540, -10251, 3497, 58613, -3397, -4380, -9923, 5681, -2653, 1172, 1329, -1927, 1214, -6341, 5322, -4630, -1407, 18000, 29595, 2693, -1175, -3444, -105, 457, 14709, -1702, -1991, -3511, -5506, -7834, 6867, -10514, 347, -841, -405, 16398, -15, -4579, 22549, -559, -1662, 2171, -9891, -8599, -8355, 64493, -697, 18062, 30955, -12659, -469, 10498, 6831, -898, -5294, 1450, -14431, 1213, 2658, -6226, -1169, -2485, -12678, 1073, 1567, 18122, 28280, 26011, -11015, -418, -7204, -1639, 42434, 8453, -946, -96, 17715, 31069, -1690, -7859, -1624, -9051, -340, -3504, 600, 3007, 2972, -92, 1025, -2902, -492, -1551, 2648, 879, 559, 48240, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019427816732786596, 0.00011021485988749191, 0.00017249924712814391, 3.6022935091750696e-05, 0.00015924093895591795, 0.00016824585327412933, 0.00027151775429956615, 7.7435382991097867e-05, 0.00016753624367993325, 0.00041970176971517503, 0.00014936221123207361, 0.00029303503106348217, 0.00012291262100916356, 0.00041731749661266804, 0.0002032724441960454, 0.00018657067266758531, 9.6401257906109095e-05, 0.000298838916933164, 5.8137866290053353e-05, 0.00017755560111254454, 5.4792151786386967e-05, 0.00017337685858365148, 0.00013257864338811487, 0.00037353797233663499, 0.00024192167620640248, 0.00020738976309075952, 0.00014062919944990426, 0.00019762244482990354, 0.00013371660315897316, 0.00010326749179512262, 0.00012053065438522026, 0.00018051803635898978, 0.00012245601101312786, 0.00019060602062381804, 0.00021747902792412788, 0.00014445080887526274, 0.00036596771678887308, 0.00011996667308267206, 4.7729379730299115e-05, 0.00012093601981177926, 0.00019806141790468246, 0.00032647303305566311, 0.00032910439767874777, 0.00014560534327756613, 0.00018300031661055982, 4.7458986955462024e-05, 0.00021347537403926253, 0.00019035556761082262, 8.5027983004692942e-05, 0.00016797706484794617, 0.00022262449783738703, 0.00011463591363281012, 0.00021576197468675673, 0.0002820866066031158, 0.0002801546361297369, 0.00059996644267812371, 0.00026258095749653876, 0.0002024706918746233, 0.00010813683911692351, 8.2815655332524329e-05, 0.00035916850902140141, 0.00014085619477555156, 0.00027256333851255476, 0.00012973745469935238, 0.0001561904646223411, 0.000168891332577914, 7.6321193773765117e-05, 6.9540998083539307e-05, 0.00031024665804579854, 0.00022859792807139456, 0.00022218131925910711, 0.0001049581405823119, 0.00014049344463273883, 0.00012925420014653355, 0.00017065163410734385, 0.00019545610120985657, 0.00044717127457261086, 5.0103171815862879e-05, 0.00023212698579300195, 0.00023824664822313935, 0.00017310134717263281, 0.0002143546735169366, 0.00013997506175655872, 0.00012273697939235717, 0.00010976212070090696, 8.7581618572585285e-05, 0.00011702509800670668, 0.00018842305871658027, 0.00022089747653808445, 0.00011336092575220391, 0.00017210766964126378, 0.00013807117647957057, 0.00015212359721772373, 0.00043740036198869348, 0.0021875954698771238, 8.2723592640832067e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,13,-22,110,-16,21,-65,-55,16,-5,105,-7,3,-8,-6,58,6,13,-38,4,73,2,34,-36,3,17,44,41,19,16,24,47,-3,32,3,-18,5,48,-85,-27,23,8,28,19,-80,-54,29,-5,-12,-17,-4,-9,50,6,-8,4,0,-34,24,-26,26,1,127,26,-14,-13,7,-49,69,37,-4,-7,77,-38,72,3,18,-121,33,58,2,22,127,-11,38,28,-31,-23,39,-3,-14,78,-1,20,0,12, -50,18,-10,10,52,-9,-11,-127,32,13,-127,-4,-14,-11,5,94,16,-30,-25,-17,79,-95,127,26,-61,-34,-106,-15,24,37,-49,20,115,20,-7,-1,-25,127,-73,-127,11,-20,-32,16,47,-127,127,-46,-78,50,48,3,42,-63,32,57,36,43,-111,82,127,38,5,-21,42,-41,-94,-1,35,-29,-15,47,-53,-50,115,-6,-35,-59,-29,62,-69,76,-9,14,-12,44,56,-41,-25,50,-12,75,-127,-33,25,-127, -3,0,-25,-73,11,17,39,19,-5,-2,9,62,6,-13,-12,8,-14,17,-17,15,7,26,22,-31,0,-32,9,10,-6,5,46,-76,42,19,10,-24,11,5,-43,-19,8,1,-17,9,25,-27,21,0,4,-9,8,-6,6,7,-6,11,-3,44,2,-2,7,-15,5,-21,-28,-20,23,-44,-111,-5,42,-14,-127,-22,-3,14,9,-11,11,9,-14,34,-32,1,-42,20,29,34,-22,-13,29,-8,11,5,-1,-46, 
  /* [0][1][][] */ -42,58,-19,44,-79,-14,-14,-43,26,92,-43,-21,-32,-24,-7,69,127,-25,-99,-13,66,-127,-26,14,-34,-47,-127,-6,31,35,-50,28,-127,-77,-59,3,70,-2,-55,47,-15,88,2,1,37,-50,-11,-33,127,45,-6,18,43,10,-37,-17,35,10,-124,127,-37,-86,22,127,-62,-35,-82,126,-40,127,-22,55,-36,-52,41,7,-33,-68,127,41,127,37,12,4,127,27,-109,42,-36,-34,-103,37,90,99,29,-60, 127,127,127,127,-39,-127,127,20,127,-127,20,-127,-106,127,127,127,-15,-127,-84,-127,127,24,-64,127,127,127,-55,-127,127,127,-127,127,-8,-127,-114,127,-127,-45,98,111,-127,-127,127,127,127,-124,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-44,43,-105,-23,-66,-71,127,127,-69,127,127,-101,-127,127,-45,127,-127,-127,-127,127,-76,127,-42,127,85,127,-40,-127,-28,-105,-127,-127,-22,-127,-22,-127,-127,116, -26,67,-39,3,127,73,-26,45,8,23,-12,-8,-27,-31,-14,-1,-99,-21,-127,33,43,80,-14,-115,-33,-42,127,73,4,38,72,10,121,-47,127,-4,58,5,-99,15,38,24,-24,4,-19,-52,-12,-43,82,14,-10,37,-6,-3,-76,-11,28,20,127,-92,3,127,2,-38,-113,-29,-74,105,15,-16,113,23,-18,-54,14,48,-30,-6,-39,-5,-44,14,48,24,-92,34,127,-45,33,-19,127,-6,-110,33,34,14, 
  /* [0][2][][] */ -4,-29,-22,-60,-3,17,41,29,-1,10,-15,53,22,-33,-9,16,43,-4,1,19,-6,29,-17,-28,2,-24,15,0,-9,-9,49,-72,-36,69,-31,-25,35,-32,-56,17,15,11,-35,20,15,-76,-11,-2,-8,8,18,-9,11,3,-25,9,2,44,-50,35,-6,-7,2,17,-9,-10,22,-48,-61,12,-24,-13,-120,-33,5,21,18,-8,57,9,26,28,-35,21,16,27,-30,7,10,27,21,-8,13,38,-8,-31, -26,-2,-28,24,-39,76,-27,61,6,-6,56,-12,127,-5,-21,-12,-2,-42,-74,21,-17,79,-42,-112,-47,-48,106,71,11,44,51,0,-125,68,-8,-21,-25,-24,-127,1,51,-12,-15,35,-25,-48,-16,-49,-62,26,69,19,-9,-79,30,55,20,26,69,-55,27,-56,-8,0,20,-27,-127,-56,-15,-26,-60,21,34,-48,-25,-6,-45,22,-58,3,51,36,20,13,5,63,-101,127,17,123,-32,-18,105,-21,45,79, -10,-22,-29,29,17,61,-48,13,2,-5,2,9,15,-51,-13,-12,-44,-8,14,19,-26,7,-21,8,-3,19,-1,44,0,-4,35,31,22,46,21,-24,-5,-24,-39,14,14,-12,21,10,-71,-32,-11,4,-2,-15,2,-5,-8,9,-18,-2,3,-49,11,-33,-23,53,10,-30,-10,-1,37,-51,48,6,51,-22,30,-54,-16,24,11,12,-2,21,-27,41,87,-11,-21,54,41,-8,107,14,4,-15,8,-22,-6,-47, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0082568218931555748, 0.0046841315925121307, 0.0073312181048095226, 0.0015309746377170086, 0.0067677395418286324, 0.0071504488587379456, 0.011539504863321781, 0.0032910036388784647, 0.0071202903054654598, 0.017837325111031532, 0.0063478937372565269, 0.012453989125788212, 0.0052237859927117825, 0.01773599348962307, 0.0086390785872936249, 0.0079292533919215202, 0.0040970533154904842, 0.01270065363496542, 0.0024708593264222145, 0.0075461128726601601, 0.0023286663927137852, 0.0073685161769390106, 0.00563459238037467, 0.015875363722443581, 0.010281670838594437, 0.0088140647858381271, 0.0059767407365143299, 0.0083989538252353668, 0.0056829554960131645, 0.0043888683430850506, 0.0051225526258349419, 0.0076720165088772774, 0.005204380489885807, 0.008100755512714386, 0.0092428587377071381, 0.0061391592025756836, 0.015553628094494343, 0.0050985836423933506, 0.0020284985657781363, 0.0051397806964814663, 0.0084176100790500641, 0.013875103555619717, 0.013986936770379543, 0.0061882268637418747, 0.0077775134705007076, 0.0020170069765299559, 0.0090727033093571663, 0.0080901114270091057, 0.0036136892158538103, 0.0071390252560377121, 0.0094615407288074493, 0.0048720263876020908, 0.0091698840260505676, 0.011988680809736252, 0.011906571686267853, 0.025498572736978531, 0.011159690096974373, 0.0086050042882561684, 0.0045958156697452068, 0.0035196652170270681, 0.015264661051332951, 0.0059863883070647717, 0.011583941057324409, 0.0055138417519629002, 0.0066380943171679974, 0.0071778814308345318, 0.0032436507754027843, 0.002955492353066802, 0.01318548247218132, 0.0097154118120670319, 0.0094427056610584259, 0.0044607208110392094, 0.005970971193164587, 0.005493303295224905, 0.0072526941075921059, 0.0083068842068314552, 0.019004778936505318, 0.0021293847821652889, 0.0098653966560959816, 0.010125482454895973, 0.0073568071238696575, 0.009110073558986187, 0.0059489402920007706, 0.0052163214422762394, 0.0046648900024592876, 0.0037222187966108322, 0.0049735666252672672, 0.0080079799517989159, 0.0093881422653794289, 0.0048178392462432384, 0.0073145758360624313, 0.0058680251240730286, 0.0064652529545128345, 0.01858951523900032, 0.092972807586193085, 0.0035157527308911085, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 16083, 1314, 6683, -729, 4195, 4549, 15396, 6477, -1411, 20024, 6382, 1563, 8730, 52062, -438, -3529, 7410, 10351, 871, -181, -933, 20229, 4341, 2768, 8543, 4196, 5496, 3738, 9, -185, 9149, 9704, 17566, 2057, 8754, -998, 30330, 7562, 1075, 3951, 529, 16503, 11102, 2665, 3877, 10895, 14925, 8663, 4728, 2732, 299, -733, 19924, 6662, 9978, 10751, -221, 9954, 2689, 2964, 14528, 8253, 3278, 5399, 7830, 4241, 4649, -1564, 18293, 6952, 8882, -1032, -1252, 3952, 1870, 3599, 14742, 14947, 17758, -2197, 5768, -7089, -1861, 509, 8422, 6616, 6658, 4678, 14812, 4476, 5951, 3777, 17302, 20718, -10854, 19300, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00016207716544158757, 0.00026365098892711103, 0.00020623207092285156, 0.00082090124487876892, 0.0003644561511464417, 0.00019714537484105676, 0.00020572345238178968, 0.00054526794701814651, 0.00036019980325363576, 9.4358183559961617e-05, 0.00021599333558697253, 0.00048484216677024961, 0.00031130097340792418, 9.3229093181435019e-05, 0.00034838833380490541, 0.00022014744172338396, 0.00028957586619071662, 0.00022727486793883145, 0.00038287570350803435, 0.00070392678026109934, 0.00036022995482198894, 0.00012214622984174639, 0.00033902423456311226, 0.00026328794774599373, 0.00020794634474441409, 0.00049224006943404675, 0.00026154614170081913, 0.00023595003585796803, 0.00051130022620782256, 0.00045588216744363308, 0.00016198892262764275, 0.00019325724861118942, 0.00011103621363872662, 0.00052590755512937903, 0.00019568191783037037, 0.00037635478656738997, 7.58762689656578e-05, 0.00033944132155738771, 0.00050031684804707766, 0.00022423012705985457, 0.00079239351907745004, 0.00011450718011474237, 0.00019583287939894944, 0.00026235735276713967, 0.00027335836784914136, 0.000291910779196769, 0.00019418209558352828, 0.00017770614067558199, 0.00032597113749943674, 0.00033725288813002408, 0.00046109964023344219, 0.00080928078386932611, 0.00013694334484171122, 0.00024017016403377056, 0.00023523945128545165, 0.00016932300059124827, 0.00048097418039105833, 0.00017933282651938498, 0.0002639302983880043, 0.00052856415277346969, 0.00011379184434190392, 0.00017545331502333283, 0.00031512026907876134, 0.0005117213586345315, 0.00013975333422422409, 0.00024925550678744912, 0.00039586969069205225, 0.00029532361077144742, 0.00014698815357405692, 0.00016185959975700825, 0.00022610541782341897, 0.00042366210254840553, 0.00028306306921876967, 0.00030848474125377834, 0.00019938855257350951, 0.00033464815351180732, 0.00015510979574173689, 0.00029886269476264715, 9.4047449238132685e-05, 0.00052079878514632583, 0.00018806589650921524, 0.00031814863905310631, 0.0002120154385920614, 0.00058945792261511087, 0.00018129529780708253, 0.00023105193395167589, 0.00024393053899984807, 0.00027975792181678116, 0.00011393615568522364, 0.0003612690488807857, 0.00023420053184963763, 0.00043200419167988002, 0.00012860710558015853, 0.00013529662101063877, 0.00027272477746009827, 0.00017113849753513932, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 20,-17,127,127,40,28,25,-57,98,-16,-50,-86,61,68,-61,-27, 
  /* [1][0][][] */ 78,54,-8,-43,111,-9,71,96,18,69,-38,127,-13,-72,13,-79, 
  /* [2][0][][] */ -4,-44,28,27,-64,42,-41,89,-25,-53,-42,59,-3,-127,100,-105, 
  /* [3][0][][] */ 123,127,-7,2,-99,-41,-62,-21,-17,-3,82,-48,-31,62,-30,2, 
  /* [4][0][][] */ -9,-34,15,38,-16,57,-2,55,-63,-48,5,9,13,-127,12,-14, 
  /* [5][0][][] */ 104,-23,-25,1,-4,-81,-11,12,-12,1,-127,-22,-9,5,43,51, 
  /* [6][0][][] */ -90,-102,-44,85,-25,5,-9,55,-113,-43,-42,-64,49,68,5,127, 
  /* [7][0][][] */ 3,1,-24,37,23,-127,-27,27,11,-55,0,3,6,43,-33,-1, 
  /* [8][0][][] */ 39,-49,13,10,6,38,-68,-48,-14,8,-87,10,-127,26,-38,1, 
  /* [9][0][][] */ 10,-59,13,127,15,50,-17,-74,107,-99,13,3,-40,39,-95,-4, 
  /* [10][0][][] */ -98,-103,31,-7,104,5,26,29,127,-71,-39,-4,70,-37,-41,10, 
  /* [11][0][][] */ -5,-3,-127,16,83,41,-27,36,4,-5,7,-4,-8,19,-40,11, 
  /* [12][0][][] */ 99,-32,-53,-17,1,-127,-90,-28,4,-32,-107,-48,-2,-20,-17,56, 
  /* [13][0][][] */ 30,-40,-34,-117,67,-47,-90,-127,-17,-28,61,19,-47,-96,45,33, 
  /* [14][0][][] */ -33,41,-64,-19,50,-127,47,-31,32,38,-31,-63,42,87,1,45, 
  /* [15][0][][] */ 57,-8,127,79,78,-29,-60,-8,33,-42,-113,-6,-119,-39,-89,16, 
  /* [16][0][][] */ -127,73,-40,-13,-36,53,25,95,-57,-11,94,7,6,-11,12,-30, 
  /* [17][0][][] */ -35,-9,-56,-41,-18,-8,36,42,-21,127,-8,13,-28,49,73,0, 
  /* [18][0][][] */ 12,127,-19,-9,-2,-21,23,-68,32,53,-77,48,18,-35,37,-78, 
  /* [19][0][][] */ 14,-20,25,3,2,55,-4,22,-10,-4,-27,-9,-127,-7,-3,27, 
  /* [20][0][][] */ 79,-82,10,-87,-39,-19,44,-83,-74,75,-127,-55,35,13,96,13, 
  /* [21][0][][] */ 94,42,121,80,0,118,3,14,-34,32,-94,-2,-19,127,-71,-39, 
  /* [22][0][][] */ 4,-37,32,3,-28,-2,22,127,22,18,2,39,6,39,35,28, 
  /* [23][0][][] */ -9,32,-69,11,33,-127,-16,10,26,-16,-34,-7,-56,18,-2,34, 
  /* [24][0][][] */ 25,-49,-4,-68,35,-10,-25,3,25,3,60,36,-36,67,127,38, 
  /* [25][0][][] */ -127,-102,-24,15,46,63,22,-31,-45,14,-64,4,-15,17,61,41, 
  /* [26][0][][] */ 20,-12,58,-5,-19,30,-38,58,-88,-69,-4,43,11,-127,53,-7, 
  /* [27][0][][] */ -72,32,-52,7,21,-27,-17,23,28,-26,127,-7,-23,-5,-5,-8, 
  /* [28][0][][] */ -9,-9,26,33,-6,-13,44,95,35,15,-20,6,-127,-15,-6,43, 
  /* [29][0][][] */ -4,51,67,-24,14,-30,23,-6,-127,54,-63,-4,22,55,-54,5, 
  /* [30][0][][] */ -4,3,-127,-47,31,-73,30,46,-58,0,-26,-2,-59,-40,31,19, 
  /* [31][0][][] */ 79,-1,-127,4,34,-1,-22,38,-33,15,-49,-19,12,-47,-64,34, 
  /* [32][0][][] */ -127,67,33,66,31,126,7,40,32,-11,116,32,-57,41,27,-20, 
  /* [33][0][][] */ -25,-17,127,-9,-54,31,16,-30,20,31,3,-4,-8,25,19,12, 
  /* [34][0][][] */ -36,-40,-127,-107,-4,-13,13,-19,-11,-47,3,-114,15,18,78,33, 
  /* [35][0][][] */ 0,-37,42,102,32,-10,21,8,-115,50,-29,48,2,127,-82,-50, 
  /* [36][0][][] */ -97,105,-73,15,-48,13,115,119,-24,93,127,18,75,-68,65,12, 
  /* [37][0][][] */ -22,0,127,-40,-88,-39,26,-34,16,21,-13,12,-14,-58,75,13, 
  /* [38][0][][] */ 26,11,18,30,57,-42,-91,27,-3,-38,33,21,127,31,-22,17, 
  /* [39][0][][] */ -8,-8,-15,-32,-52,-99,37,127,-33,-27,-24,-14,65,4,45,50, 
  /* [40][0][][] */ 61,-14,9,-7,-16,68,-49,-8,7,3,27,-1,127,1,-30,-17, 
  /* [41][0][][] */ 6,-26,-67,-127,74,33,-77,-112,54,-81,-12,-81,-34,-16,-7,46, 
  /* [42][0][][] */ 48,12,3,82,-82,-33,-72,16,-30,-43,19,-54,-11,127,-6,11, 
  /* [43][0][][] */ 28,92,-24,127,5,15,0,-59,-15,42,-2,31,41,-17,92,5, 
  /* [44][0][][] */ -8,-31,-127,38,47,122,-84,40,-9,-24,52,-9,-2,-17,-68,15, 
  /* [45][0][][] */ 3,21,-25,-127,-35,-17,38,1,3,-2,-56,34,8,-120,53,-24, 
  /* [46][0][][] */ -18,42,96,-2,25,33,-36,33,32,-44,-13,18,-23,127,71,-30, 
  /* [47][0][][] */ 34,-18,8,-64,-39,-27,-57,21,-10,-36,-3,31,-15,-127,63,21, 
  /* [48][0][][] */ 15,-9,22,-127,-17,-15,-11,5,22,-18,9,6,15,41,6,65, 
  /* [49][0][][] */ 42,-26,-22,94,52,16,8,59,-79,31,30,21,-15,44,127,0, 
  /* [50][0][][] */ -24,-15,37,-15,22,80,-44,-71,30,2,127,33,93,1,16,-55, 
  /* [51][0][][] */ 28,51,1,26,35,-20,-58,12,71,-3,-24,127,20,23,5,-77, 
  /* [52][0][][] */ -12,75,127,16,11,-34,20,-66,-29,16,-11,52,12,88,-115,-6, 
  /* [53][0][][] */ -10,-14,-31,-127,-42,-9,-12,-71,-56,7,9,29,1,-9,34,3, 
  /* [54][0][][] */ -27,-1,-37,-41,54,-15,-24,-19,87,-41,-9,-78,-33,127,-14,-13, 
  /* [55][0][][] */ 7,-10,-127,32,40,-74,-50,-14,12,-65,-6,-26,11,-67,-42,-13, 
  /* [56][0][][] */ 20,58,4,48,6,-33,8,127,23,-40,27,-30,88,-17,-19,35, 
  /* [57][0][][] */ 26,-70,127,-10,-33,-98,-61,-47,83,-20,-123,11,31,-33,75,-8, 
  /* [58][0][][] */ 74,73,39,124,-87,60,11,47,-10,85,127,-39,-85,-13,-33,-67, 
  /* [59][0][][] */ 127,-10,9,18,5,-12,-11,3,-16,26,-95,-18,15,-3,-11,-7, 
  /* [60][0][][] */ -127,81,-86,-28,-6,11,33,43,-41,9,91,-37,-78,-11,-16,-19, 
  /* [61][0][][] */ -106,32,22,-3,0,-55,-80,-19,127,-108,120,-6,59,2,-80,-21, 
  /* [62][0][][] */ -33,-18,-127,41,112,118,-22,97,36,-50,50,7,-60,10,-60,-15, 
  /* [63][0][][] */ -40,-9,127,-34,-38,-26,27,-13,1,11,3,-2,-20,-20,51,15, 
  /* [64][0][][] */ 48,82,-41,-39,46,-56,61,-127,-66,66,-9,-65,-24,-105,-20,117, 
  /* [65][0][][] */ 10,22,-7,5,96,-21,-47,-127,-26,-74,-49,-33,30,-20,52,3, 
  /* [66][0][][] */ -127,49,-9,14,-43,11,-2,-27,-62,-42,-102,60,56,28,41,95, 
  /* [67][0][][] */ 9,-109,36,127,-3,-32,-80,70,89,80,52,-48,-6,-75,-110,-19, 
  /* [68][0][][] */ 5,-16,-22,127,-60,-6,24,2,-43,39,-12,-40,-4,-39,-41,-21, 
  /* [69][0][][] */ 78,95,10,112,80,7,39,-127,23,121,41,82,-1,-31,42,-25, 
  /* [70][0][][] */ 19,-58,-25,-35,34,-26,52,73,68,-46,16,-65,27,127,51,74, 
  /* [71][0][][] */ -6,85,11,77,62,-127,-28,89,27,-75,2,16,-7,-37,-61,42, 
  /* [72][0][][] */ -127,-112,-19,38,37,52,-38,7,-48,-33,-75,19,23,51,17,79, 
  /* [73][0][][] */ -21,25,-19,127,-38,-19,28,24,94,47,-43,14,54,57,-46,-72, 
  /* [74][0][][] */ 66,-38,7,-38,-40,-74,48,-42,-43,-34,-118,-10,-127,32,60,30, 
  /* [75][0][][] */ 13,-6,-26,127,-82,8,14,25,-101,10,-41,-36,17,-15,-7,-20, 
  /* [76][0][][] */ 21,-5,15,35,14,19,-11,-107,10,-115,10,46,-4,-25,127,-24, 
  /* [77][0][][] */ 127,-39,37,42,-57,-50,-58,12,36,-16,-40,61,58,-13,-25,59, 
  /* [78][0][][] */ -35,-38,68,7,12,-28,-123,15,66,-104,-53,36,61,127,78,-26, 
  /* [79][0][][] */ -4,5,44,9,39,59,-36,-53,2,-65,82,-32,127,-23,-31,-46, 
  /* [80][0][][] */ -73,-69,-80,86,0,36,43,6,-59,127,-76,-16,38,-85,4,64, 
  /* [81][0][][] */ 35,25,-97,-2,124,56,-7,-13,-45,-78,87,-127,7,12,-70,14, 
  /* [82][0][][] */ 114,127,30,38,-98,-36,-22,1,-71,28,87,-90,-35,100,27,-56, 
  /* [83][0][][] */ 127,68,32,-15,8,2,-14,33,50,32,65,-48,-48,-25,-19,-73, 
  /* [84][0][][] */ 22,-126,-127,-72,83,11,-3,-126,-13,-59,37,33,-19,29,53,8, 
  /* [85][0][][] */ -19,54,-13,-73,-29,5,125,107,-28,113,-83,-10,-21,127,127,-30, 
  /* [86][0][][] */ 97,-30,-16,0,-13,-31,4,-21,-18,-1,-127,8,26,2,-17,31, 
  /* [87][0][][] */ -45,47,-25,-27,1,56,-80,69,-25,-38,60,-6,-7,-127,14,-16, 
  /* [88][0][][] */ 14,-87,-85,-62,114,-75,-50,-127,59,-18,-7,28,-80,67,28,2, 
  /* [89][0][][] */ 30,-28,15,-110,34,-23,-53,118,62,-127,22,56,-3,64,50,43, 
  /* [90][0][][] */ 3,61,-76,36,13,13,83,-73,24,127,-37,-20,8,-22,11,22, 
  /* [91][0][][] */ 11,-4,-83,3,25,-127,-7,-3,-13,8,-14,-17,20,-29,8,22, 
  /* [92][0][][] */ 4,-6,127,70,34,-1,-27,8,-19,29,-54,-17,41,85,-28,-35, 
  /* [93][0][][] */ 127,-20,6,-5,-23,-35,11,28,-22,46,-123,-2,-20,1,22,51, 
  /* [94][0][][] */ 23,-17,55,127,68,-20,32,101,-8,47,-20,69,46,118,-35,-45, 
  /* [95][0][][] */ -127,36,17,53,30,74,27,6,9,13,122,4,-44,32,-43,-61, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00050850387196987867, 0.00082718342309817672, 0.00064703630050644279, 0.0025755106471478939, 0.0011434514308348298, 0.00061852752696722746, 0.00064544053748250008, 0.0017107337480410933, 0.0011300974292680621, 0.00029604110750369728, 0.00067766144638881087, 0.0015211526770144701, 0.0009766813600435853, 0.00029249867657199502, 0.0010930399876087904, 0.00069069460732862353, 0.00090852059656754136, 0.00071305636083707213, 0.0012012412771582603, 0.0022085127420723438, 0.0011301920749247074, 0.0003832238435279578, 0.001063660834915936, 0.00082604441558942199, 0.00065241468837484717, 0.0015443629818037152, 0.00082057964755222201, 0.00074027397204190493, 0.0016041627386584878, 0.0014302930794656277, 0.00050822703633457422, 0.00060632883105427027, 0.00034836705890484154, 0.0016499920748174191, 0.00061393604846671224, 0.0011807824485003948, 0.00023805559612810612, 0.0010649694595485926, 0.001569703221321106, 0.00070350372698158026, 0.0024860699195414782, 0.00035925692645832896, 0.00061440968420356512, 0.00082312477752566338, 0.00085763959214091301, 0.00091584620531648397, 0.00060923048295080662, 0.00055753852939233184, 0.0010227077873423696, 0.0010581034002825618, 0.0014466624706983566, 0.0025390523951500654, 0.00042964855674654245, 0.00075351429404690862, 0.00073804456042125821, 0.00053123710677027702, 0.0015090171946212649, 0.00056264211889356375, 0.00082805973943322897, 0.0016583268297836185, 0.0003570126136764884, 0.0005504704313352704, 0.00098866410553455353, 0.0016054840525612235, 0.00043846468906849623, 0.00078201881842687726, 0.0012420088751241565, 0.00092655373737215996, 0.00046116331941448152, 0.00050782127073034644, 0.00070938729913905263, 0.0013292052317410707, 0.00088808726286515594, 0.0009678456699475646, 0.00062556529883295298, 0.0010499312775209546, 0.00048664433415979147, 0.00093765731435269117, 0.00029506618739105761, 0.0016339636640623212, 0.00059004139620810747, 0.00099816534202545881, 0.00066518114181235433, 0.001849376130849123, 0.0005687992088496685, 0.0007249065674841404, 0.00076531217200681567, 0.00087771762628108263, 0.00035746538196690381, 0.0011334521695971489, 0.00073478504782542586, 0.0013553778408095241, 0.00040349428309127688, 0.000424482102971524, 0.00085565168410539627, 0.00053693307563662529, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -31058, 11915, 4034, -8259, -5504, -7233, -12796, -36777, 5180, 17939, 31696, 9457, 3145, -20082, 34851, -35954, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00062726560281589627, 0.00079395790817216039, 0.0010641957633197308, 0.0010578982764855027, 0.00092937779845669866, 0.0011265793582424521, 0.00084831280400976539, 0.00055464758770540357, 0.00054846901912242174, 0.00041836523450911045, 0.00074787141056731343, 0.00052877666894346476, 0.0011153320083394647, 0.0012239881325513124, 0.00060042203404009342, 0.00052182096987962723, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -16,-12,-21,9,38,-2,0,99,-57,11,12,-2,22,-16,-9,19,28,-10,-6,0,79,8,29,126,-13,88,-17,-20,38,-25,24,-9,-28,70,18,-45,18,47,13,-11,-121,-47,18,42,49,32,-127,-48, 
  /* [1][0][][] */ -29,-19,22,18,-28,0,12,43,-67,-35,-18,-45,-14,-17,13,4,-33,123,-7,18,10,11,-24,-12,25,-48,18,25,-36,-84,-34,21,-14,2,30,-7,-5,-44,-7,31,-16,-42,127,12,10,1,10,-15, 
  /* [2][0][][] */ -19,-14,-13,-41,-1,-76,5,-19,-3,2,8,24,6,20,-21,13,-8,-20,-23,-9,-9,3,-4,-127,-10,81,-20,2,-1,-15,-4,-10,8,51,16,-1,19,19,26,2,-49,1,-17,-5,-3,-11,1,3, 
  /* [3][0][][] */ -6,30,1,-30,-8,-5,8,7,-25,3,-5,37,-127,9,-3,-2,2,9,-20,-2,-37,7,4,23,-6,-11,-3,22,-11,17,-4,11,4,3,12,25,-15,20,44,9,14,8,28,-31,4,-4,-2,7, 
  /* [4][0][][] */ 42,-33,3,15,24,35,20,-23,-25,-11,-16,-22,-3,9,8,-2,23,-10,-85,12,-9,14,24,84,2,-38,0,52,19,-76,24,7,-6,-55,36,-127,20,39,-2,6,-13,35,20,-17,-17,-10,14,-6, 
  /* [5][0][][] */ 34,5,-18,58,-3,-11,9,29,0,-5,35,8,0,58,-5,9,-31,28,33,2,12,3,-2,-19,5,-60,1,-24,-9,-9,3,-2,76,-127,3,35,-13,-13,18,4,-93,57,24,1,-6,-5,-101,-20, 
  /* [6][0][][] */ 21,10,13,3,-24,3,7,-17,2,9,3,7,-19,3,0,6,3,-16,127,-3,5,2,19,-42,1,4,30,-12,-14,3,-8,16,8,-9,34,-38,4,-49,75,18,-5,-8,-11,3,-15,0,14,-10, 
  /* [7][0][][] */ -45,6,-11,40,-19,72,0,47,2,24,-39,127,73,2,1,-6,-6,-26,-10,-21,-38,0,-13,68,9,-42,-44,-34,-21,-19,-12,1,19,13,-23,-6,6,-63,110,8,22,10,-52,-72,15,-16,-11,0, 
  /* [8][0][][] */ -37,-46,-14,-6,-11,-7,-2,30,-6,-66,16,36,45,3,7,6,-23,78,-40,2,-54,27,-4,-16,-12,5,-2,48,-17,113,-14,19,20,10,-14,-127,-103,65,31,22,12,-13,110,-26,25,26,29,21, 
  /* [9][0][][] */ -42,11,-18,34,14,-34,3,-6,82,-48,10,72,-74,-6,26,-4,-12,4,-35,-21,54,13,-15,-25,-20,25,47,-30,16,32,11,12,-1,10,103,-111,-3,-127,-108,15,-45,45,72,6,-19,14,-30,-46, 
  /* [10][0][][] */ -11,-15,-33,-127,45,85,14,-15,2,29,24,4,48,-35,-34,20,16,-38,53,-23,24,-18,27,56,-47,-107,-3,-34,51,32,42,-40,-24,-91,23,-1,20,-44,5,-43,-28,-52,-9,13,16,16,29,-58, 
  /* [11][0][][] */ 6,76,-21,67,27,-85,-79,-30,-23,89,-43,-10,-1,69,-5,-88,23,70,-1,-38,-62,-110,8,-4,21,-61,24,-30,10,-59,17,-108,69,-4,-50,-114,98,25,4,-125,-11,47,127,-77,-2,-63,19,51, 
  /* [12][0][][] */ 127,-9,-21,8,-7,22,-3,108,22,-13,-67,-26,-10,-5,-12,-1,-10,11,-19,-2,1,13,5,15,-3,12,-3,9,-7,13,2,-1,-1,-59,-18,16,-26,-13,-25,4,-18,-95,6,-126,-48,-13,88,1, 
  /* [13][0][][] */ 8,6,-6,3,7,-9,2,-2,-3,0,-1,23,-8,7,7,0,3,9,12,0,11,-12,6,-8,0,6,20,127,8,-2,3,-7,9,2,-44,22,6,0,7,-15,-17,-3,1,0,-3,-4,-10,-11, 
  /* [14][0][][] */ 55,-36,56,-51,50,34,49,-96,-38,-51,18,127,-62,-22,56,22,41,18,-44,57,36,12,67,-20,30,61,-29,-110,23,-38,77,48,-2,77,-122,-56,-38,40,87,15,-29,4,42,-2,-5,-11,23,-15, 
  /* [15][0][][] */ -11,-61,-66,-48,66,24,86,-48,-19,25,-31,-33,98,8,-100,68,70,79,65,-91,-91,-28,62,-10,-113,34,18,53,70,26,38,-42,37,81,87,127,-20,-127,-11,-29,97,46,107,-57,6,-44,-8,80, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026658786460757256, 0.033743210136890411, 0.045228317379951477, 0.044960673898458481, 0.039498556405305862, 0.047879621386528015, 0.036053292453289032, 0.023572523146867752, 0.023309933021664619, 0.017780521884560585, 0.031784534454345703, 0.022473007440567017, 0.047401607036590576, 0.052019495517015457, 0.025517934933304787, 0.02217739075422287, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 5688, 44268, -1176, 49888, 4100, 132598, -2914, 58353, 1449, 35452, 22443, 2186, 3422, 30658, -159, -1502, -398, -1078, 1100, -1868, -505, -3733, 352, -20337, -4311, 46733, 124984, 107381, 3391, 9393, -2578, -32, 24202, 1086, 48511, -16, 76021, 1265, 43486, 1581, 2749, 66831, -1624, 3523, 50980, -454, 681, 48728, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.9909139963565394e-05, 3.4987500839633867e-05, 0.00017327650857623667, 4.8202200559899211e-05, 0.00013951564324088395, 5.7833080063574016e-05, 0.00012830138439312577, 0.00010158690565731376, 9.2547670647036284e-05, 4.1647286707302555e-05, 4.5085718738846481e-05, 8.5120780568104237e-05, 3.6926503526046872e-05, 3.608995393733494e-05, 0.00014834704052191228, 0.00018210004782304168, 0.00014314570580609143, 8.9880202722270042e-05, 0.00013903698709327728, 0.00015398602408822626, 8.0096993769984692e-05, 0.00019054512085858732, 8.3860177255701274e-05, 0.00010845345968846232, 0.00010279004345647991, 9.7461736004333943e-05, 1.9071050701313652e-05, 6.4162180933635682e-05, 0.00011954046203754842, 7.4799259891733527e-05, 9.69597531366162e-05, 0.00014021754032000899, 4.9836886319098994e-05, 0.00015051080845296383, 2.5638903025537729e-05, 5.4927000746829435e-05, 7.6020507549401373e-05, 8.6684514826629311e-05, 0.00013363720790948719, 7.6941672887187451e-05, 9.4809023721609265e-05, 8.9787135948427022e-05, 7.6615731813944876e-05, 8.9100642071571201e-05, 2.8276028388063423e-05, 0.00016536464681848884, 0.00010266172466799617, 2.8377922717481852e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 72,-98,98,71,53,-32,105,-67,62,-93,-77,48,54,-48,-79,-87,106,81,48,77,65,-71,-86,58,-35,-43,-69,-69,-68,65,-62,-112,-19,43,72,62,-68,54,-55,-20,54,-74,62,63,-98,11,79,-32, 84,-101,127,85,-79,-66,-56,-85,97,-108,-63,73,78,-107,-98,89,-44,97,83,127,86,-114,50,74,-53,-80,-74,-82,51,81,-28,-127,-85,81,82,82,-81,83,-84,-13,75,-94,83,89,-75,-127,94,-97, 34,-46,71,38,19,-40,-48,-40,42,-29,3,35,30,-81,-58,-1,-54,40,35,70,37,-53,32,27,-26,-46,-48,-25,32,32,88,-88,-80,46,37,36,-29,42,-39,-11,41,-41,39,44,-4,-10,39,-76, 
  /* [0][1][][] */ 95,-113,-44,97,56,-82,127,-93,87,-115,-71,83,86,-110,-13,-127,127,109,74,-38,83,109,-127,77,73,-77,-94,-100,-127,89,-70,-9,-92,73,109,97,-88,78,-81,90,86,-100,92,93,-94,104,95,-92, 127,-127,-68,127,-127,-127,-94,-127,127,-127,-127,127,127,-127,-21,93,-71,127,127,-51,127,127,67,127,127,-127,-127,-127,50,127,-28,14,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 65,-77,-34,67,38,-60,-51,-67,55,-42,-62,58,50,-56,-16,10,-64,51,60,-27,58,65,51,67,66,-67,-65,-47,36,55,127,13,-58,73,48,53,-50,61,-60,54,61,-58,53,65,-60,-67,59,-57, 
  /* [0][2][][] */ 49,-54,-47,51,27,-56,65,-45,41,-76,-6,41,57,-66,86,-80,76,52,37,-32,30,-7,-79,31,-24,-48,-51,-47,-74,33,-43,92,-76,41,49,44,-32,37,-47,-86,48,-51,44,47,-27,18,43,-77, 73,-79,-50,80,-58,-64,-76,-70,55,-80,-60,59,75,-48,127,32,-47,62,65,-46,55,-14,39,70,-51,-65,-80,-61,31,61,-23,115,-53,68,58,58,-53,60,-66,-106,69,-73,62,64,-90,52,65,-55, 44,-44,-27,47,30,-17,-19,-36,17,-27,-47,30,32,3,71,24,-33,23,29,-33,31,1,39,46,-25,-29,-52,-26,34,34,60,66,-1,35,18,24,-23,30,-30,-56,32,-36,30,31,-64,9,29,-7, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0025461383629590273, 0.0014869687147438526, 0.0073642516508698463, 0.0020485934801399708, 0.0059294146485626698, 0.0024579057935625315, 0.0054528089240193367, 0.0043174433521926403, 0.0039332760497927666, 0.0017700096359476447, 0.0019161429954692721, 0.0036176331341266632, 0.0015693763270974159, 0.00153382308781147, 0.006304748822003603, 0.0077392519451677799, 0.0060836924239993095, 0.0038199084810912609, 0.0059090717695653439, 0.0065444055944681168, 0.0034041223116219044, 0.0080981673672795296, 0.0035640574060380459, 0.0046092718839645386, 0.0043685766868293285, 0.0041421237401664257, 0.00081051967572420835, 0.0027268927078694105, 0.0050804694183170795, 0.0031789685599505901, 0.0041207894682884216, 0.0059592453762888908, 0.0021180675830692053, 0.0063967090100049973, 0.001089653349481523, 0.0023343975190073252, 0.0032308713998645544, 0.0036840918473899364, 0.0056795813143253326, 0.0032700211741030216, 0.0040293834172189236, 0.003815953154116869, 0.003256168682128191, 0.0037867771461606026, 0.0012017311528325081, 0.0070279976353049278, 0.0043631233274936676, 0.0012060616863891482, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 513, 636, 1917, 310, 6420, 12393, 1874, -4, -626, -471, 1101, 811, 2521, 1034, 20792, 2766, 1529, -1369, -522, 3667, -1347, 8403, 8224, 8998, 6266, 48, 3603, 4007, 6389, -413, 8693, 4186, 717, -419, 4463, 3250, -1528, 217, -906, 4129, 89, -426, -771, -177, 793, 4134, 778, 752, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00049757346278056502, 0.0011364535894244909, 0.00029133030329830945, 0.0003892099775839597, 0.00033119824365712702, 0.0003306807775516063, 0.00054143561283126473, 0.00030458229593932629, 0.00047989672748371959, 0.00080349302152171731, 0.00098388385958969593, 0.00034369924105703831, 0.00050219590775668621, 0.00081215676618739963, 0.00017413723981007934, 0.00046634217142127454, 0.00029120501130819321, 0.00032939601805992424, 0.00019761553267017007, 0.000275908358162269, 0.00042355584446340799, 0.00031260534888133407, 0.00045706212404184043, 0.00017368534463457763, 0.00026426344993524253, 0.00036128939245827496, 0.0019172283355146646, 0.0004693391383625567, 0.00027142817270942032, 0.00054441700922325253, 0.00030502691515721381, 0.00028055667644366622, 0.00075262319296598434, 0.00025863212067633867, 0.00086483854101970792, 0.00055614148732274771, 0.00086952088167890906, 0.00044629853800870478, 0.00026007735868915915, 0.0004586032300721854, 0.00023604242596775293, 0.00029434610041789711, 0.00041480601066723466, 0.0002764432574622333, 0.002460345858708024, 0.00034695316571742296, 0.00037620295188389719, 0.0014397912891581655, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,7,-6,58,-40,32,31,-31, 
  /* [1][0][][] */ -15,62,24,9,41,-37,71,127, 
  /* [2][0][][] */ -50,14,0,7,-127,-26,15,8, 
  /* [3][0][][] */ 102,0,-19,-105,-127,0,45,-11, 
  /* [4][0][][] */ -127,50,6,-13,32,0,41,0, 
  /* [5][0][][] */ -114,-33,33,-21,-127,12,-1,77, 
  /* [6][0][][] */ 8,-127,17,0,8,4,2,41, 
  /* [7][0][][] */ -71,2,-1,95,127,-28,-25,16, 
  /* [8][0][][] */ 48,16,5,-127,15,-34,-59,-43, 
  /* [9][0][][] */ 20,-127,-38,3,-23,77,-29,100, 
  /* [10][0][][] */ -105,-10,-21,26,-127,109,69,-11, 
  /* [11][0][][] */ 127,8,37,6,-74,-41,-39,-124, 
  /* [12][0][][] */ -6,22,60,5,23,-83,127,73, 
  /* [13][0][][] */ 39,-10,-22,-34,127,123,99,-38, 
  /* [14][0][][] */ 107,58,9,-16,-127,-25,-64,-5, 
  /* [15][0][][] */ -1,-127,27,-23,-13,7,-3,28, 
  /* [16][0][][] */ -91,-13,22,-4,-127,-7,38,19, 
  /* [17][0][][] */ -21,113,-126,4,0,-127,115,-92, 
  /* [18][0][][] */ 127,-38,-36,22,-93,10,17,120, 
  /* [19][0][][] */ 127,-51,-33,19,61,21,53,-8, 
  /* [20][0][][] */ 127,-1,-31,113,-16,48,-1,-62, 
  /* [21][0][][] */ -9,56,-48,-9,-12,50,-127,-69, 
  /* [22][0][][] */ -127,55,5,-11,-29,-8,-34,2, 
  /* [23][0][][] */ -38,-56,3,27,-127,60,90,-14, 
  /* [24][0][][] */ 127,-31,-10,-27,-126,-16,9,21, 
  /* [25][0][][] */ 26,-14,-20,-21,127,63,55,-37, 
  /* [26][0][][] */ -1,-97,0,-39,-10,-127,88,-42, 
  /* [27][0][][] */ -16,-127,29,-16,-4,-50,39,-3, 
  /* [28][0][][] */ -118,30,9,-5,-4,2,127,70, 
  /* [29][0][][] */ 6,37,14,18,22,32,-92,-127, 
  /* [30][0][][] */ 127,-64,-11,-9,-79,9,-68,-20, 
  /* [31][0][][] */ -22,-37,86,-17,-10,-93,127,82, 
  /* [32][0][][] */ -53,46,-5,31,-127,-115,-106,46, 
  /* [33][0][][] */ -29,18,-5,28,-127,-64,-57,20, 
  /* [34][0][][] */ 16,-127,33,-2,0,89,-53,61, 
  /* [35][0][][] */ -23,-50,-127,-9,-10,-84,48,-55, 
  /* [36][0][][] */ 17,127,61,11,12,23,-17,-44, 
  /* [37][0][][] */ -127,27,16,-20,32,-15,0,-81, 
  /* [38][0][][] */ -127,-6,-43,-12,63,40,52,103, 
  /* [39][0][][] */ 4,-42,46,2,-2,-66,127,87, 
  /* [40][0][][] */ -26,-10,-8,-44,-127,101,106,-34, 
  /* [41][0][][] */ -127,52,-10,-76,-85,-82,-71,60, 
  /* [42][0][][] */ -70,-127,-102,-12,-3,65,-114,-43, 
  /* [43][0][][] */ -85,14,-13,-127,121,59,78,10, 
  /* [44][0][][] */ 127,-25,0,-94,32,-23,-10,38, 
  /* [45][0][][] */ -44,-127,-5,-3,-8,-85,112,17, 
  /* [46][0][][] */ 98,3,-5,-27,127,-44,-31,6, 
  /* [47][0][][] */ 127,2,-32,123,24,8,23,-9, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00078025652328506112, 0.0017820993671193719, 0.00045684183714911342, 0.00061032921075820923, 0.00051935965893790126, 0.00051854824414476752, 0.00084903778042644262, 0.00047762258327566087, 0.00075253722025081515, 0.0012599760666489601, 0.0015428510960191488, 0.0005389627767726779, 0.00078750512329861522, 0.0012735619675368071, 0.00027306866832077503, 0.00073128199437633157, 0.00045664535718970001, 0.00051653356058523059, 0.00030988550861366093, 0.00043265832937322557, 0.00066418776987120509, 0.00049020373262465, 0.00071672972990199924, 0.00027236001915298402, 0.00041439768392592669, 0.00056654628133401275, 0.0030064503662288189, 0.00073598162271082401, 0.00042563283932395279, 0.00085371301975101233, 0.00047831979463808239, 0.00043994744191877544, 0.0011802059598267078, 0.00040556705789640546, 0.0013561734231188893, 0.00087209837511181831, 0.0013635159702971578, 0.00069985113805159926, 0.00040783334407024086, 0.00071914639556780457, 0.0003701436216942966, 0.00046157094766385853, 0.00065046694362536073, 0.00043349710176698864, 0.0038581255357712507, 0.00054406531853601336, 0.0005899326060898602, 0.0022577701602131128, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -43087, 22350, -13984, -11255, 23455, 3932, 24089, 38716, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00047062162775546312, 0.00075327220838516951, 0.0015278953360393643, 0.0016834278358146548, 0.00074696220690384507, 0.00051586859626695514, 0.00070238928310573101, 0.0010369570227339864, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -47,-26,-34,-2,18,-23,-3,18,-115,115,-66,102,109,0,99,-13,-16,-44,20,0,-3,21,-16,-38,11,-127,26,69,10,-2,25,-50,16,-70,121,12,2,19,-1,12,109,-15,42,-46,-38,4,-20,-15, 
  /* [1][0][][] */ 13,28,127,7,0,-46,-3,-59,33,-2,24,6,-31,13,-20,-119,6,-66,15,5,-41,30,15,-21,-20,4,24,-8,14,-46,13,-16,-3,4,31,18,-17,-33,74,-49,22,61,-20,32,-25,11,7,-4, 
  /* [2][0][][] */ 5,-43,26,-37,34,24,-1,-22,15,-10,-6,18,-16,58,11,10,-40,127,-31,-30,-8,12,-36,5,123,-7,-5,-5,-27,-5,7,-38,-10,-19,-11,3,-1,-9,-12,13,9,-28,-2,-3,-5,34,-19,-33, 
  /* [3][0][][] */ -1,-69,-3,3,9,-14,0,5,-2,-14,11,13,22,-16,43,6,-16,-21,-2,16,-4,16,-22,-1,2,49,-9,9,1,5,127,0,3,11,7,0,-17,-16,-7,13,-11,16,2,26,-12,15,0,23, 
  /* [4][0][][] */ -106,6,1,19,-4,-51,5,17,46,-38,21,-11,-40,-17,-13,-5,6,-6,1,6,-1,-38,3,3,-12,46,-8,100,-6,-2,-12,-43,-2,-127,-45,-3,-5,-7,-1,7,-53,1,-18,17,-61,5,-6,4, 
  /* [5][0][][] */ -35,34,20,16,-46,3,-3,58,18,1,9,23,-20,-49,7,51,11,-94,22,-7,52,-83,-7,39,21,8,-94,-45,-51,-27,16,-2,-12,-85,19,-84,70,-19,-66,31,10,-52,1,-8,127,-25,-35,-11, 
  /* [6][0][][] */ -17,-26,0,-13,22,-16,-7,-31,-7,-11,42,-12,-15,33,4,-60,-11,22,-3,-18,-25,60,-10,-78,4,-21,-40,-61,19,39,-16,25,-3,-51,-27,67,-73,-30,16,-67,3,28,31,40,127,-19,39,5, 
  /* [7][0][][] */ 18,25,-71,35,-32,22,2,62,-11,5,78,-18,4,-33,-8,-11,-16,-127,29,-46,57,38,15,-50,20,-27,28,-9,-17,42,-9,16,-1,36,-14,-26,-12,-44,-45,-63,-23,-33,60,69,-29,-24,-10,4, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020001418888568878, 0.032014068216085434, 0.064935550093650818, 0.071545682847499847, 0.031745892018079758, 0.021924415603280067, 0.02985154464840889, 0.044070672243833542, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51414, 301, 10287, 1115, 7013, -3118, 1949, 28604, 2721, 37319, -3914, 28673, -7617, -944, 28867, 10640, 853, 17424, 33694, 12099, -125, -435, -807, 19570, -7989, 27367, 46165, 35135, 3173, 1513, -2576, 333, 1229, 17947, -6146, 17573, -12430, 21006, -22035, 149391, 27853, 25184, 11129, -2018, 12771, 5438, 1100, -982, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032531321630813181, 0.00030156047432683408, 0.00017207236669491976, 0.00025571990408934653, 0.00012079182488378137, 0.00010112079326063395, 0.00061341369291767478, 0.0001216050804941915, 0.0001157039005192928, 0.00013461730850394815, 8.6215855844784528e-05, 0.00015279941726475954, 0.00024426024174317718, 0.00016837510338518769, 8.6680971435271204e-05, 0.00014953527715988457, 0.00018510634254198521, 0.00022657241788692772, 6.7381268308963627e-05, 0.00015240177162922919, 0.00020765178487636149, 0.00021060447033960372, 0.00015544971392955631, 0.00010450292757013813, 0.00015482366143260151, 0.00012958970910403877, 0.00059539277572184801, 9.0397603344172239e-05, 0.00018607093079481274, 0.00059651810443028808, 0.00011722608178388327, 0.00019824049377348274, 0.0007901047938503325, 0.00016513225273229182, 0.00020122743444517255, 0.00014785848907195032, 0.00031279769609682262, 0.00012499859440140426, 0.00026568741304799914, 1.7967766325455159e-05, 0.0001161827749456279, 5.9011781559092924e-05, 0.00014336562890093774, 0.00013120169751346111, 0.0001600100367795676, 0.00011216805432923138, 0.00021289409778546542, 0.00010218533861916512, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-3,19,107,3,77,-2,26,16,6,12,6,-8,-8,-47,6,-4,8,-22,-116,-6,-23,127,-8,0,12,-7,11,-2,2,14,97,18,27,39,-27,2,33,-1,5,17,-70,-7,-9,21,-2,-4,-8, 127,8,14,-127,26,87,10,9,126,127,10,41,-54,-24,6,6,127,-56,-59,-57,-98,25,-108,15,18,73,-32,-82,26,19,9,-120,4,-64,127,7,-40,-47,-6,114,-79,-94,-32,2,-32,-12,-127,23, -33,-5,6,13,-1,62,4,17,28,7,-12,29,-15,-3,16,2,-103,29,-5,79,-31,-12,-17,-4,-4,-59,-4,31,-16,3,2,-19,8,-25,17,-19,0,48,40,-9,49,33,-16,13,-39,-2,0,-6, 
  /* [0][1][][] */ 126,8,0,-96,13,-30,33,-17,9,7,-9,51,-6,-1,14,-34,-2,-49,-58,-88,11,-76,-124,-17,7,104,-14,-127,-7,30,12,-104,15,-52,-5,127,-2,57,-38,43,-63,-127,43,-88,-41,-17,-12,-3, 27,-127,-127,111,-127,-127,-127,-127,-127,-98,127,-127,127,127,34,-127,-83,127,127,-110,127,127,111,127,127,-127,-127,28,-127,-127,96,127,-127,127,-32,-43,127,-127,127,127,127,-79,127,127,127,-127,103,107, 54,3,48,-14,5,-61,45,18,-25,13,-100,-10,3,-40,127,3,64,-65,-72,87,14,-48,12,-30,1,7,-37,70,21,38,0,4,31,-45,9,67,-4,65,66,-6,-82,4,-86,-30,29,-21,-11,5, 
  /* [0][2][][] */ -56,-5,26,-18,7,29,-38,23,5,-27,14,30,10,-6,-42,18,3,22,-11,107,6,-31,-15,-9,-1,24,0,54,-9,0,48,-28,-20,-42,-37,-39,1,29,9,-19,9,-1,45,-37,-31,15,-11,18, 68,124,75,19,14,-19,124,35,16,-5,45,25,-3,0,-89,25,-58,-56,-34,125,-35,49,12,22,33,-62,-39,30,78,-1,127,22,84,-27,3,-37,-24,-17,-11,118,-27,-11,-42,46,23,-36,7,-127, -44,-5,6,-4,4,-7,-61,8,-22,-13,-37,-42,26,-10,-8,11,33,24,-8,-127,23,-11,6,-6,-7,9,-10,-53,-15,7,6,9,-21,87,-41,-21,-3,37,24,-55,4,4,-40,8,-37,124,-5,-5, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013825811445713043, 0.012816320173442364, 0.0073130754753947258, 0.01086809579282999, 0.0051336525939404964, 0.0042976336553692818, 0.026070082560181618, 0.0051682158373296261, 0.0049174157902598381, 0.0057212356477975845, 0.0036641738843172789, 0.0064939749427139759, 0.010381059721112251, 0.0071559417992830276, 0.0036839412059634924, 0.00635524932295084, 0.0078670196235179901, 0.009629327803850174, 0.0028637039940804243, 0.0064770751632750034, 0.0088252006098628044, 0.0089506898075342178, 0.0066066128201782703, 0.004441374447196722, 0.0065800053998827934, 0.0055075627751648426, 0.025304192677140236, 0.0038418981712311506, 0.0079080145806074142, 0.025352019816637039, 0.0049821082502603531, 0.0084252208471298218, 0.033579453825950623, 0.0070181204937398434, 0.0085521657019853592, 0.0062839854508638382, 0.013293901458382607, 0.0053124404512345791, 0.011291714385151863, 0.00076363002881407738, 0.0049377679824829102, 0.0025080007035285234, 0.0060930391773581505, 0.0055760722607374191, 0.0068004266358911991, 0.0047671422362327576, 0.0090479990467429161, 0.0043428768403828144, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 65252, 8100, 6147, 7331, 1410, 8137, -1563, -220, 786, 2080, 2821, 280, 1766, -614, 889, -1819, 4461, 9354, -253, 31701, 4365, 2565, 7654, -465, 2992, 3888, 26124, 9259, -52, -2313, 88, 1906, -1872, 9284, 3236, 6329, 5894, 3323, 21511, 1622, -577, 2973, 925, 3187, 4173, 1905, -1520, 2372, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.6665765189100057e-05, 0.00029117742087692022, 0.0002546094183344394, 0.00044352625263854861, 0.0015882852021604776, 0.00062013755086809397, 0.0012451629154384136, 0.0012554163113236427, 0.00070721312658861279, 0.00068237073719501495, 0.00079475692473351955, 0.00051927909953519702, 0.00060084677534177899, 0.00067521317396312952, 0.00055930169764906168, 0.0019616738427430391, 0.00037412825622595847, 0.00045278313336893916, 0.002190334489569068, 8.630836964584887e-05, 0.00026200982392765582, 0.00039413422928191721, 0.00052951392717659473, 0.0012394299264997244, 0.00040321264532394707, 0.00030439783586189151, 0.00015566384536214173, 0.00040396611439064145, 0.0010370585368946195, 0.0011679335730150342, 0.00060992001090198755, 0.00041903369128704071, 0.0010852250270545483, 0.00024412242055404931, 0.00032960376120172441, 0.00027887380565516651, 0.00061155669391155243, 0.00041564091225154698, 0.00010581124661257491, 0.0027275499887764454, 0.00099371362011879683, 0.00096042605582624674, 0.00051134737441316247, 0.00047944829566404223, 0.00029341541812755167, 0.00056917767506092787, 0.00075733230914920568, 0.0011119182454422116, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 57,20,0,-16,127,50,-71,-23, 
  /* [1][0][][] */ -6,0,1,127,20,-2,7,18, 
  /* [2][0][][] */ 15,-127,-9,58,-15,-83,86,26, 
  /* [3][0][][] */ 127,-48,-12,30,-5,-46,61,-6, 
  /* [4][0][][] */ -18,-49,127,-19,-20,-60,15,-108, 
  /* [5][0][][] */ 57,10,-8,-22,127,5,-19,-17, 
  /* [6][0][][] */ -10,85,5,127,12,39,-56,-45, 
  /* [7][0][][] */ 1,127,-5,2,1,2,7,-7, 
  /* [8][0][][] */ 127,54,-12,0,-61,-13,27,-32, 
  /* [9][0][][] */ -127,-7,2,27,39,10,0,12, 
  /* [10][0][][] */ -66,-5,10,127,38,28,-12,-9, 
  /* [11][0][][] */ -127,12,24,-75,21,8,-6,-25, 
  /* [12][0][][] */ 127,20,-17,3,-39,-14,19,-50, 
  /* [13][0][][] */ -10,77,-114,0,9,127,-65,44, 
  /* [14][0][][] */ -75,-39,-28,127,25,-10,-1,11, 
  /* [15][0][][] */ -8,127,4,-2,5,-13,10,-49, 
  /* [16][0][][] */ -31,-127,-7,-21,-23,-115,120,-20, 
  /* [17][0][][] */ 19,127,-6,-5,12,58,-88,-22, 
  /* [18][0][][] */ -2,45,-127,5,8,82,-28,51, 
  /* [19][0][][] */ -106,14,6,-8,-127,5,22,22, 
  /* [20][0][][] */ -103,-1,90,18,127,-70,40,73, 
  /* [21][0][][] */ -47,4,6,10,-127,-2,-15,7, 
  /* [22][0][][] */ -127,-55,-9,-15,81,-24,29,60, 
  /* [23][0][][] */ -8,-26,-5,-13,15,70,-127,-71, 
  /* [24][0][][] */ -10,38,-127,7,16,45,-3,77, 
  /* [25][0][][] */ 50,-20,-15,127,-48,-5,8,-53, 
  /* [26][0][][] */ 15,-7,-5,-15,1,107,127,-36, 
  /* [27][0][][] */ 54,-13,-17,4,127,24,48,-15, 
  /* [28][0][][] */ 19,110,-62,5,9,104,-65,127, 
  /* [29][0][][] */ 20,12,-24,-16,-13,77,-127,-93, 
  /* [30][0][][] */ 10,-7,-4,-127,-12,-1,-4,-14, 
  /* [31][0][][] */ -55,-18,8,4,-127,-1,6,17, 
  /* [32][0][][] */ -2,33,14,-127,2,33,-84,-90, 
  /* [33][0][][] */ -38,-8,-1,-3,-127,42,37,-1, 
  /* [34][0][][] */ -127,107,8,33,14,-47,9,1, 
  /* [35][0][][] */ -8,127,-26,-15,-23,-97,107,-29, 
  /* [36][0][][] */ 5,50,18,-22,6,92,-127,-24, 
  /* [37][0][][] */ 63,-64,-14,12,-6,-127,52,-16, 
  /* [38][0][][] */ 78,-127,-27,45,29,2,-84,116, 
  /* [39][0][][] */ 16,-127,-16,-4,-4,-19,-55,-99, 
  /* [40][0][][] */ 64,47,9,-3,-24,44,-127,-72, 
  /* [41][0][][] */ 20,-127,23,7,-9,103,-85,126, 
  /* [42][0][][] */ 13,-1,1,-127,-38,10,20,-28, 
  /* [43][0][][] */ -67,-7,9,-127,42,13,1,-16, 
  /* [44][0][][] */ 3,-22,6,17,-17,83,127,-1, 
  /* [45][0][][] */ -127,-23,11,1,-36,21,16,-57, 
  /* [46][0][][] */ 46,103,127,-9,-31,53,50,6, 
  /* [47][0][][] */ 4,13,8,127,4,0,-7,-1, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00014648491924162954, 0.00063980516279116273, 0.00055945420172065496, 0.00097456184448674321, 0.003489944851025939, 0.0013626305153593421, 0.0027360010426491499, 0.0027585306670516729, 0.0015539618907496333, 0.0014993756776675582, 0.0017463222611695528, 0.0011410138104110956, 0.0013202427653595805, 0.0014836483169347048, 0.0012289555743336678, 0.0043103927746415138, 0.00082207337254658341, 0.00099490198772400618, 0.0048128296621143818, 0.00018964569608215243, 0.00057571515208110213, 0.00086603255476802588, 0.0011635028058663011, 0.0027234037406742573, 0.00088598061120137572, 0.00066885445266962051, 0.00034204073017463088, 0.00088763621170073748, 0.002278732368722558, 0.0025663047563284636, 0.0013401794712990522, 0.00092074420535936952, 0.0023845687974244356, 0.00053641106933355331, 0.00072423950769007206, 0.00061277044005692005, 0.0013437756570056081, 0.00091328925918787718, 0.00023249942751135677, 0.0059932554140686989, 0.0021834904327988625, 0.0021103476174175739, 0.001123585388995707, 0.001053493469953537, 0.00064472277881577611, 0.0012506560888141394, 0.0016640890389680862, 0.0024432218633592129, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -9636, -29158, 28234, 23142, 6267, 3763, 38465, 12264, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012958169681951404, 0.00059920607600361109, 0.0013941933866590261, 0.001226976397447288, 0.0011433975305408239, 0.0012662853114306927, 0.00085030635818839073, 0.00081843649968504906, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -8,2,10,-95,9,24,13,3,2,0,7,-10,102,0,-5,2,0,-5,-5,3,82,4,-2,0,41,57,9,-9,4,8,2,-127,14,4,-2,3,-16,-6,-7,31,9,-28,-2,10,3,-2,7,6, 
  /* [1][0][][] */ -31,-7,1,-3,39,26,-36,77,22,2,-37,-25,7,0,22,29,0,53,6,-53,3,22,127,26,-29,6,54,4,25,-3,17,-11,14,-6,-13,-12,9,-52,10,7,-8,-17,-91,-4,-42,17,-57,-93, 
  /* [2][0][][] */ -63,11,-9,14,41,-15,31,24,-16,67,12,-19,4,0,3,55,0,1,-127,27,0,15,8,-4,-33,4,42,16,4,29,23,2,1,-7,-17,-19,-4,-3,-4,8,41,-11,-31,12,29,-56,27,16, 
  /* [3][0][][] */ -4,6,-1,5,-6,26,4,-6,69,10,-3,-4,21,0,-25,0,0,-1,-7,-1,-3,4,1,-14,-16,-9,-14,-1,-2,-4,-11,-6,-42,37,-52,-6,6,7,-4,-127,3,1,1,-50,-3,-1,0,3, 
  /* [4][0][][] */ -11,-5,97,32,4,-29,-4,-4,4,-7,0,-3,-83,0,-9,6,0,3,5,2,60,0,4,-8,-6,27,-10,59,-31,-1,-4,107,4,7,-2,-11,18,-28,-19,-14,-7,-127,0,1,-2,-5,2,-1, 
  /* [5][0][][] */ -11,44,12,-14,4,42,23,15,-19,27,3,57,26,0,-127,1,0,8,-33,19,-5,9,-11,39,-20,-2,23,2,-19,18,21,-16,51,34,-39,-10,-5,21,-52,17,22,-17,-13,31,16,54,21,21, 
  /* [6][0][][] */ -16,-60,8,0,43,-65,-25,8,28,-21,-12,97,-5,0,-127,46,0,0,39,-16,-13,8,32,-30,29,-25,0,-11,45,-22,-14,-6,96,-35,25,-4,6,-5,-87,-22,-15,-13,-3,-26,-26,-68,-23,-26, 
  /* [7][0][][] */ -111,-26,-9,10,127,19,63,21,24,25,20,-37,-27,0,82,101,0,12,2,61,-13,4,-31,46,18,0,37,5,36,66,56,-4,-7,-7,-26,-30,6,28,19,33,70,7,-28,-2,61,-4,66,66, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.055072221904993057, 0.025466257706284523, 0.059253215789794922, 0.052146498113870621, 0.048594396561384201, 0.053817126899957657, 0.03613802045583725, 0.034783549606800079, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 74506, 62850, 61395, 40906, -886, 13607, 1997, 30012, 28345, 32566, 28607, 6638, -47206, -127, 38336, 456, -204, 34306, 1707, 526, -14057, 5327, 44497, 38500, -18709, 32442, 39284, 23704, -2652, 15162, -8914, -51096, 9663, 108967, 31832, 1083, 71191, 130, 118092, -24815, 14839, -24683, 1398, 103391, -2792, 84392, 1832, -22788, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.0638579674996436e-05, 6.3519328250549734e-05, 0.00017441733507439494, 0.00010217726230621338, 0.00012421116116456687, 0.00016582742682658136, 0.00013310938084032387, 5.5838016123743728e-05, 8.2833648775704205e-05, 3.0712839361513034e-05, 8.2475467934273183e-05, 3.2897114579100162e-05, 0.00017801295325625688, 0.005541567225009203, 6.7679138737730682e-05, 0.00021521920280065387, 0.0027484172023832798, 2.0955876607331447e-05, 7.8202530858106911e-05, 0.00017271841352339834, 9.2629205028060824e-05, 0.00014930896577425301, 0.00013183393457438797, 3.2472620659973472e-05, 8.7135071225930005e-05, 8.8221400801558048e-05, 3.3823234844021499e-05, 4.6203756937757134e-05, 0.0003389746998436749, 4.8472109483554959e-05, 3.9421254768967628e-05, 0.00019135112233925611, 0.00024058273993432522, 9.2966620286460966e-06, 7.5838601333089173e-05, 0.000176461529918015, 1.0725157153501641e-05, 0.00048987241461873055, 3.9375008782371879e-05, 8.1512094766367227e-05, 5.6571963796159253e-05, 0.00016986228001769632, 0.00010830908286152408, 9.7518341135582887e-06, 0.0001551581226522103, 6.9927838922012597e-05, 0.00020114795188419521, 0.0001069224817911163, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-24,-6,-19,8,-40,-79,-71,-27,-49,12,68,35,-71,114,-43,-113,-82,37,-4,1,-72,-112,-78,-34,-121,-63,-25,71,17,95,26,-127,-94,-5,58,18,47,-127,80,-78,-15,106,-113,-2,-36,-88,109, 74,14,-27,-29,57,-127,-127,-82,60,-72,-113,108,37,-82,-1,63,-52,-112,58,8,11,-109,-127,-70,-5,-127,-120,-41,-53,23,-58,54,29,-127,64,88,12,70,-93,127,-127,6,125,-127,3,-22,-127,94, -33,44,7,-6,-64,-109,-58,-20,88,-10,-127,33,9,-71,-102,-10,-127,-26,26,12,-15,-73,-37,-23,-10,-31,-56,-16,-11,19,-24,9,109,-86,70,35,12,37,-14,18,-78,1,7,-87,-16,6,-56,15, 
  /* [0][1][][] */ -86,-127,-47,-46,-10,54,100,-107,-24,-110,-19,116,91,-64,28,-98,-121,-96,90,-77,44,-90,-102,-127,43,-121,-76,-41,127,-60,127,84,-43,-89,-12,86,-34,-76,-106,93,43,60,107,-116,-91,-121,81,120, 127,-80,-127,-127,127,42,94,-127,100,-127,-110,127,127,-14,-5,127,-60,-127,127,-127,127,-127,-117,-122,127,-101,-127,-127,-116,-127,-72,127,29,-110,127,127,-67,-127,-95,89,63,127,127,-115,-111,-127,124,127, -52,30,-62,-84,-119,-23,32,-40,127,-23,-74,34,57,-70,-25,-43,-37,-31,52,-72,57,-78,-37,-22,49,-7,-46,-59,16,-90,-34,20,32,-100,120,24,-35,-61,-5,-13,39,51,13,-83,-56,-36,64,35, 
  /* [0][2][][] */ -62,-107,-33,-33,0,35,-4,-35,-35,-58,-13,59,78,-127,-127,-64,-43,-18,65,78,53,-34,-14,-61,32,-58,-14,-56,75,29,76,63,109,-32,-37,-7,-95,35,-23,31,7,35,16,-62,95,-80,3,30, 87,-70,-85,-81,82,20,7,-48,50,-74,-29,56,83,-26,18,92,-24,-33,78,118,80,-54,-18,-56,91,-73,-19,-92,-49,41,-46,112,-19,-52,69,10,-127,48,-17,0,9,31,18,-72,127,-100,-12,40, -28,28,-40,-34,-79,-19,23,-11,60,-6,-12,34,32,-43,113,-30,-93,-6,28,60,73,-25,-1,-1,42,-2,-4,-61,-12,28,-20,41,-90,-42,68,6,-21,21,20,-38,5,31,-3,-22,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0034271397162228823, 0.0026995714288204908, 0.0074127363041043282, 0.0043425336480140686, 0.0052789743058383465, 0.0070476653054356575, 0.0056571485474705696, 0.0023731156252324581, 0.0035204300656914711, 0.0013052956201136112, 0.0035052073653787374, 0.0013981274096295238, 0.0075655505061149597, 0.23551659286022186, 0.0028763634618371725, 0.0091468160971999168, 0.1168077290058136, 0.00089062470942735672, 0.003323607612401247, 0.0073405327275395393, 0.0039367410354316235, 0.0063456310890614986, 0.0056029418483376503, 0.0013800864107906818, 0.0037032405380159616, 0.0037494094576686621, 0.0014374874299392104, 0.001963659655302763, 0.014406424015760422, 0.0020600645802915096, 0.0016754033276811242, 0.0081324223428964615, 0.010224766097962856, 0.00039510813076049089, 0.0032231404911726713, 0.0074996147304773331, 0.00045581918675452471, 0.02081957645714283, 0.0016734378878027201, 0.0034642638638615608, 0.0024043084122240543, 0.0072191464714705944, 0.0046031358651816845, 0.00041445292299613357, 0.0065942201763391495, 0.0029719332233071327, 0.0085487877950072289, 0.0045442054979503155, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4201, 75, 9659, 4744, 6906, 6403, 7834, -27, -93, -299, 2030, 438, 11851, -78495864, 4033, 20090, -63365932, -115, -303, 10792, 3533, -18, -115, 300, 3262, -827, 51, 472, 3877, 1567, 2492, 15414, 4065, 344, 220, -1826, 298, 2793, -226, 12228, 2000, 9861, -208, -97, 10467, 326, 9189, 4007, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00051123747834935784, 0.00047005308442749083, 0.00032698569702915847, 0.00036792366881854832, 0.00028938640025444329, 0.00032841760548762977, 0.00049188669072464108, 0.0015587677480652928, 0.00041284103645011783, 0.0025165933184325695, 0.00072418828494846821, 0.0016633730847388506, 0.00018643600924406201, 2.0661428123958103e-09, 0.00067888986086472869, 0.0001634284999454394, 2.0661428123958103e-09, 0.0065769418142735958, 0.00053863361245021224, 0.00035778398159891367, 0.00029307472868822515, 0.0047464999370276928, 0.00035885334364138544, 0.0018814938375726342, 0.0011419763322919607, 0.0006415131501853466, 0.0024468463379889727, 0.0024164037313312292, 0.00028832475072704256, 0.0018663235241547227, 0.00117949687410146, 0.00015419459668919444, 0.00020008810679428279, 0.0092583084478974342, 0.00048076795064844191, 0.00060415518237277865, 0.0050197276286780834, 0.00044328099465928972, 0.0021104952320456505, 0.00028290602494962513, 0.0014073170023038983, 0.00021420096163637936, 0.00051353324670344591, 0.0091616101562976837, 0.00047746187192387879, 0.00048433628398925066, 0.00030515209073200822, 0.00021864123118575662, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 18,-127,49,-44,27,-14,-55,19, 
  /* [1][0][][] */ 51,66,-28,-127,4,-2,-65,124, 
  /* [2][0][][] */ 31,14,-38,127,72,85,19,88, 
  /* [3][0][][] */ 69,68,-76,127,-69,-16,-9,19, 
  /* [4][0][][] */ -42,-88,63,18,-16,23,-33,-127, 
  /* [5][0][][] */ 20,7,-31,35,-1,-55,21,127, 
  /* [6][0][][] */ 38,19,-87,-59,127,-29,26,-35, 
  /* [7][0][][] */ 127,16,22,-24,24,-3,77,-60, 
  /* [8][0][][] */ 3,-82,0,110,0,24,12,-127, 
  /* [9][0][][] */ 127,-123,22,-35,-34,16,-122,109, 
  /* [10][0][][] */ -127,-56,-106,29,-4,18,-73,24, 
  /* [11][0][][] */ -23,-34,-4,-107,-127,-45,53,-7, 
  /* [12][0][][] */ 10,7,-34,79,-69,-11,60,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 2,-21,-5,31,70,127,33,53, 
  /* [15][0][][] */ 37,24,32,-127,83,48,-59,78, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 2,29,127,21,-39,-9,36,31, 
  /* [18][0][][] */ 78,-127,18,38,-24,14,-82,1, 
  /* [19][0][][] */ -127,-11,51,64,-73,-35,-88,91, 
  /* [20][0][][] */ 22,28,-43,127,-38,-121,9,63, 
  /* [21][0][][] */ 60,19,127,16,-12,0,74,14, 
  /* [22][0][][] */ -81,-12,-127,0,-4,16,-78,1, 
  /* [23][0][][] */ -78,124,-17,7,-15,2,127,-76, 
  /* [24][0][][] */ 7,-61,-50,72,-19,-51,101,127, 
  /* [25][0][][] */ 22,39,24,22,116,127,-73,-52, 
  /* [26][0][][] */ -80,-22,-127,-6,11,22,-95,9, 
  /* [27][0][][] */ -7,-30,-28,3,-16,127,63,41, 
  /* [28][0][][] */ 0,-13,-16,49,37,127,43,55, 
  /* [29][0][][] */ 84,9,127,-3,-24,-5,85,-20, 
  /* [30][0][][] */ -88,123,-19,-47,7,-15,127,-37, 
  /* [31][0][][] */ -37,-100,-27,-8,0,-81,127,101, 
  /* [32][0][][] */ 10,11,-48,127,16,88,54,116, 
  /* [33][0][][] */ -5,50,-16,-127,9,-14,0,119, 
  /* [34][0][][] */ -18,72,-18,-110,17,13,23,127, 
  /* [35][0][][] */ 114,-24,-43,-52,-26,127,121,-55, 
  /* [36][0][][] */ -127,-5,14,54,-29,-17,-104,66, 
  /* [37][0][][] */ -10,-7,-5,27,33,127,38,38, 
  /* [38][0][][] */ 22,22,3,104,127,11,-11,43, 
  /* [39][0][][] */ 0,40,35,-127,21,-7,-38,117, 
  /* [40][0][][] */ 86,22,127,-1,-6,-17,91,-20, 
  /* [41][0][][] */ -3,-39,-35,81,41,127,82,102, 
  /* [42][0][][] */ -100,-22,127,30,-42,32,-39,67, 
  /* [43][0][][] */ -16,-51,4,86,-19,12,20,-127, 
  /* [44][0][][] */ 26,-11,-47,-127,36,-38,-7,-77, 
  /* [45][0][][] */ -107,127,-16,-68,-23,0,95,-57, 
  /* [46][0][][] */ -127,6,59,37,-15,23,-84,54, 
  /* [47][0][][] */ 106,33,97,2,10,-27,127,0, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00097415631171315908, 0.00089567998657003045, 0.00062306696781888604, 0.00070107373176142573, 0.00055142201017588377, 0.00062579545192420483, 0.00093728362116962671, 0.002970211673527956, 0.00078666320769116282, 0.0047953356988728046, 0.0013799313455820084, 0.0031695356592535973, 0.0003552513662725687, 3.937008052901092e-09, 0.0012936157872900367, 0.0003114108694717288, 3.937008052901092e-09, 0.012532277032732964, 0.0010263592703267932, 0.00068175268825143576, 0.00055845006136223674, 0.0090443938970565796, 0.00068379036383703351, 0.0035851618740707636, 0.0021760209929198027, 0.001222394872456789, 0.0046624336391687393, 0.0046044257469475269, 0.00054939906112849712, 0.0035562550183385611, 0.0022475158330053091, 0.00029381579952314496, 0.00038126527215354145, 0.017641585320234299, 0.00091609702212736011, 0.0011512098135426641, 0.0095650255680084229, 0.00084466615226119757, 0.0040215211920440197, 0.00053907372057437897, 0.0026816241443157196, 0.00040815712418407202, 0.00097853085026144981, 0.017457328736782074, 0.00090979738160967827, 0.00092289643362164497, 0.00058146333321928978, 0.0004166180151514709, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1487, -44435, -6267, -12895, -22740, -2948, -24022, -27698, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0018979260930791497, 0.0022960763890296221, 0.0024376290384680033, 0.0011861085658892989, 0.0011589812347665429, 0.0018890378996729851, 0.0013540515210479498, 0.00099813856650143862, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-18,1,-2,127,-1,6,-2,0,-126,-97,-5,0,119,-1,0, 
  /* [1][0][][] */ 0,-18,-7,88,76,8,29,6,1,-2,127,-46,0,30,-8,0, 
  /* [2][0][][] */ 0,-4,-6,-12,-57,5,7,3,-1,2,-17,1,0,127,-9,0, 
  /* [3][0][][] */ 0,-5,-21,-127,75,26,71,17,1,58,3,32,0,-2,20,0, 
  /* [4][0][][] */ 0,27,-34,31,-43,22,127,-10,-1,-58,11,-18,0,-12,18,0, 
  /* [5][0][][] */ 0,-23,-6,-1,-23,-23,-1,10,-1,8,-5,-46,0,-7,127,0, 
  /* [6][0][][] */ 0,8,-1,2,57,-18,-37,3,-1,-103,111,71,0,127,60,0, 
  /* [7][0][][] */ 0,18,-10,127,9,-2,20,1,2,72,-56,75,0,-8,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.080661855638027191, 0.097583241760730743, 0.10359923541545868, 0.050409615039825439, 0.049256701022386551, 0.080284111201763153, 0.057547189295291901, 0.0424208864569664, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 22241, 41679, 11404, 11051, 44653, 13899, 20412, -10024, 6042, 31123, 14431, -445, 27589, 11494, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00011684703349601477, 9.7748641564976424e-05, 0.00030346319545060396, 0.00016942046931944788, 7.3802359111141413e-05, 0.00034963301732204854, 0.00019338021229486912, 2.0944688003510237e-05, 0.0002835090272128582, 0.0001826777879614383, 0.00075283343903720379, 0.00072724185883998871, 0.0002238200104329735, 0.00016711890930309892, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-126,38,-67,80,-76,-90,-3,-8,29,-127,5,55,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,6,127,-25, 24,-24,86,-2,-73,67,-94,77,-95,-27,3,-15,61,1,-100,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,16,-28,14,-28,1,3,-108,-49,8,-29,-14, -78,-41,-58,-15,-8,-25,8,-27,-108,-89,21,-11,-104,-127,2,23, 14,1,60,2,2,34,-25,33,-127,7,-2,2,-21,12,-3,43, 
  /* [0][2][][] */ -115,-73,66,2,-7,39,-39,52,-77,0,-1,4,40,2,-26,23, 23,-4,30,-2,-28,40,-34,21,-125,-13,-1,83,-58,0,-27,-111, 21,-7,16,0,4,15,9,22,-115,5,-1,-127,107,2,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0049659986980259418, 0.0041543170809745789, 0.012897185049951077, 0.0072003696113824844, 0.0031366001348942518, 0.014859402552247047, 0.0082186590880155563, 0.0008901492110453546, 0.012049132958054543, 0.0077638057991862297, 0.031995419412851334, 0.030907778069376945, 0.0095123499631881714, 0.0071025537326931953, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 14079, -65874, 43965, 362141, 10686, 63052, 2974, 285933, 47830, 37493, 1053810, -1073741824, 51678, 62861, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00015837652608752251, 0.00024434243096038699, 2.8576183467521332e-05, 9.0876183094223961e-06, 0.00014925726281944662, 5.3598403610521927e-05, 0.00020495278295129538, 5.9358130783948582e-06, 4.1394239815417677e-05, 7.9759811342228204e-05, 5.4355327847588342e-06, 1.1533876076441629e-09, 7.4359471909701824e-05, 4.4337561121210456e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 27,-7,28, -17,-21,17, -127,-91,-44, 
  /* [1][1][][] */ -10,-6,1, -31,3,-3, -13,-15,13, 
  /* [1][2][][] */ -14,16,1, -15,9,-1, 22,-6,16, 
  /* [2][0][][] */ 35,-10,-25, 57,106,-22, 47,-43,-11, 
  /* [2][1][][] */ 13,14,-14, 51,127,-43, 32,-1,-17, 
  /* [2][2][][] */ 52,-67,10, 67,-46,-33, 41,-52,6, 
  /* [3][0][][] */ 12,42,-1, 24,86,7, 1,9,0, 
  /* [3][1][][] */ 35,56,9, 61,127,23, -15,-18,7, 
  /* [3][2][][] */ 18,22,13, 20,26,10, -1,-1,10, 
  /* [4][0][][] */ 52,64,-24, 19,62,-29, 9,15,5, 
  /* [4][1][][] */ 54,76,22, 31,97,7, 56,64,-6, 
  /* [4][2][][] */ 78,86,18, 53,127,5, 14,59,48, 
  /* [5][0][][] */ 8,-6,-99, -3,-5,-93, -10,22,-27, 
  /* [5][1][][] */ 9,-56,-127, 4,-54,-110, -2,9,-23, 
  /* [5][2][][] */ 9,2,-20, 10,-9,-15, 3,11,-9, 
  /* [6][0][][] */ 23,-61,38, 43,-86,45, 8,-19,11, 
  /* [6][1][][] */ 34,-96,63, 60,-127,76, 6,-27,19, 
  /* [6][2][][] */ 20,-36,15, 13,-45,29, -13,7,1, 
  /* [7][0][][] */ -31,16,10, -112,-39,7, -28,18,2, 
  /* [7][1][][] */ -10,-9,4, -127,-92,-4, -10,-9,7, 
  /* [7][2][][] */ -23,29,-12, -18,7,-5, -32,21,-6, 
  /* [8][0][][] */ -75,-79,-6, -73,-72,-12, -70,-77,-41, 
  /* [8][1][][] */ -78,-84,-14, -76,-78,-17, -79,-83,-44, 
  /* [8][2][][] */ -102,-127,33, -102,-114,20, -119,-124,-58, 
  /* [9][0][][] */ -10,12,11, -11,-1,-7, 3,3,-20, 
  /* [9][1][][] */ 98,114,1, 76,127,22, 0,26,31, 
  /* [9][2][][] */ -40,-45,16, -4,-47,1, 8,-3,-21, 
  /* [10][0][][] */ -25,-85,-18, 34,94,21, -8,-14,-2, 
  /* [10][1][][] */ -59,-104,-13, 80,127,15, -16,-27,1, 
  /* [10][2][][] */ -31,-20,3, 37,22,-10, -7,-1,8, 
  /* [11][0][][] */ -14,-31,2, 13,-45,10, 14,-102,-48, 
  /* [11][1][][] */ -50,-51,-22, -35,-68,-37, -11,-61,-51, 
  /* [11][2][][] */ -10,-42,-85, 117,127,60, -42,12,-52, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-18, -62,-111,-25, -9,-17,-5, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 8,16,11, 
  /* [13][2][][] */ -8,-19,2, 1,-18,-2, 1,5,-4, 
  /* [14][0][][] */ 46,-13,-38, 77,-32,-47, 31,-11,-18, 
  /* [14][1][][] */ 89,-26,-75, 127,-47,-84, 59,-21,-32, 
  /* [14][2][][] */ 58,-15,-44, 74,-28,-48, 26,-11,-14, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.040386009961366653, 0.062307313084602356, 0.0072869262658059597, 0.0023173424415290356, 0.038060598075389862, 0.013667591847479343, 0.052262958139181137, 0.0015136322472244501, 0.010555530898272991, 0.020338751375675201, 0.0013860607286915183, 2.9411381774480105e-07, 0.018961664289236069, 0.011306077241897583, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.52480024099349976, } };
const TfArray<1, int> quant46_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.45510324835777283, } };
const TfArray<1, int> quant50_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.48944425582885742, } };
const TfArray<1, int> quant53_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.63770496845245361, } };
const TfArray<1, int> quant54_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.31873339414596558, } };
const TfArray<1, int> quant58_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.23341713845729828, } };
const TfArray<1, int> quant61_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.35281455516815186, } };
const TfArray<1, int> quant62_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25536027550697327, } };
const TfArray<1, int> quant65_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.4406985342502594, } };
const TfArray<1, int> quant66_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.065077409148216248, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.14049229025840759, } };
const TfArray<1, int> quant69_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
